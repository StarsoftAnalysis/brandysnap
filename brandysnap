#!/usr/bin/perl

#########################################################################
# brandysnap: rsync-based backup snapshot creation and management       #
# Copyright (C) 2011,2012 Chris Dennis, chris@starsoftanalysis.co.uk    #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# (at your option) any later version.                                   #
#                                                                       #
# This program is distributed in the hope that it will be useful,       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
# GNU General Public License for more details.                          #
#                                                                       #
# You should have received a copy of the GNU General Public License     #
# along with this program.  If not, see <http://www.gnu.org/licenses/>. #
#########################################################################

# Coding style:
# CONSTANTS in upper case
# Globals with a leading capital
# otherVariables in camelCase (except for some frequently used things like @S)
# Formatting this file -- see the 'vim:' line at the end,
# and limit lines to 100 characters if possible.
# Keep it neat and tidy!

use 5.10.1;         
use strict;
use warnings;

use Time::Local;
use POSIX qw(ceil floor strftime);
use Date::Manip;    # see http://search.cpan.org/~sbeck/Date-Manip-6.23/lib/Date/Manip/DM6.pod
use Getopt::Long qw(GetOptionsFromArray :config ignore_case auto_abbrev);
use Math::Combinatorics;
use JSON;           # for metadata file
use File::Path qw(remove_tree);
use File::Glob qw(:glob); 
use File::Find;
use File::Temp qw(tempfile tempdir);
use File::Spec::Functions qw(rel2abs splitdir catfile catdir);
use File::Basename;
use Fcntl qw(:flock);
use Scalar::Util qw(looks_like_number);
use IPC::Open3;
use Symbol qw(gensym);
use IO::File;
use Sys::Hostname;
use Data::Dumper;   # only for dev

# Interrupts and other housekeeping ===============================================================

# get a stack trace: (may get turned off later)
use Carp;
$SIG{__DIE__} = sub { Carp::confess(@_) };

# Make this script robust against interruptions.
# $Interrupted becomes true if the script has been interrupted
my $Interrupted = '';
# Set the process group so that we can tidy up child processes:
setpgrp(0, 0);
# Trap interrupts: set a flag and make sure any children are killed
sub killgroup {
    my $sig = shift;
    $SIG{$sig} = 'IGNORE'; # don't kill ourselves again
    $Interrupted = $sig; 
    kill($sig, -$$);
};
local $SIG{HUP}  = \&killgroup;
local $SIG{INT}  = \&killgroup;
local $SIG{QUIT} = \&killgroup;
local $SIG{ABRT} = \&killgroup;
local $SIG{TERM} = \&killgroup;

# Turn off buffering on STDOUT to get full error messages
$| = 1;

# Globals and constants ============================================================================

my $Script = 'brandysnap';

# Version of this script
my $Version = '0.2.0';
use constant VERSION => $Version;

# A copy of @ARG before it gets shifted
my @ARGVcopy = @ARGV;

# Exit codes
use constant EXITOK     => 0;
use constant EXITCONFIG => 1;   # Configuration/option error
use constant EXITSPECS  => 2;   # Spec error
use constant EXITRSYNC  => 3;   # Error running rsync
use constant EXITINT    => 4;   # Interrupted
use constant EXITNOLOCK => 5;   # Can't get lock
my $ExitCode = EXITOK;

#my $SymlinkExists = eval { symlink("",""); 1 };  not used

# Options -- need some options to start with
our %Opt = ();   
$Opt{debug}    = 1; # Set this > 0 when debugging the processOptions()
$Opt{verbose}  = 1;
$Opt{loglevel} = 1;

# Template for snapshot directory names -- the date part:
# (if you change this, existing snapshots will not be found!)
use constant STAMPFMT  => "%Y%m%d-%H%M%S";
use constant STAMPFMT0 => '00000000-000000';

# Hash of snapshots, keyed by snapshot Unix time,
# each entry containing these fields:
#  name     - name of the snapshot directory e.g. 'docs-20111130-320234'
#  path     - directory path to name (NOT ending with '/')
#  fullname - same as path/name   
#  partial  - true if it's a partial (incomplete) snapshot, with a name ending with the suffix
#  size     - size of the snapshot in bytes
#  remote   - true if it's on a remote destination
#  daemon   - true if it's remote and accessed via an rsync daemon
my %S;

# Date/time constants and globals 

# A value that will be bigger than any value of 'time' or any total of lots of 'time's
use constant MAXTIME => 2**53;  # according to http://www.perlmonks.org/?node_id=718414

# An 'unlimited' number of snapshots
use constant UNLIMITED => 99999;

# Days in the month (ignoring leap years)
my @DiM = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

# Datecalc deltas for each period:
my @PrevP = (
    '-0:0:-0:0:1:0:0',  # h 
    '-0:0:-0:1:0:0:0',  # d
    '-0:0:-1:0:0:0:0',  # w
    '-0:1:-0:0:0:0:0',  # m
    '-1:0:-0:0:0:0:0',  # y
);

# Date::Manip's period identifiers
# (see http://search.cpan.org/~sbeck/Date-Manip-6.24/lib/Date/Manip/Delta.pod#PRINTF_DIRECTIVES)# 
# indexed by periodn
my @DMperiod = ('h', 'd', 'w', 'M', 'y');

# For converting e.g. 'd' to 1
my %Level = (h => 0, d => 1, w => 2, m => 3, M => 3, y => 4);

my @LevelName = ('hour', 'day', 'week', 'month', 'year');
my %LevelName = ('h' => 'hour',
                 'd' => 'day',
                 'w' => 'week',
                 'm' => 'month',
                 'y' => 'year');

# Number of hours in periods at each level
# (approximate for months and years)
my @Hours = (1, 24, 24*7, 24*7*4, 24*7*4*12);   

# Periods in seconds:
use constant MINUTE => 60;
use constant HOUR   => MINUTE * 60;
use constant DAY    => HOUR * 24;
use constant WEEK   => DAY * 7;
# months and years aren't fixed in terms of seconds!

# Regexp used for parsing specs
my $specRegex = 
           '\s*(?<freqmin>\d+)
            \s*(-\s*(?<freqmax>\d+))?
            \s*(?<period>[hdwmy])
            \s*(?<count>\d*)
            \s*';

# An empty temporary directory for use in deleteSnapshot(), mkdirRsync(), etc.
# (yes, I know, this is a bit of a kludge)
my $EmptyDir = tempdir(CLEANUP => 1);

# Summary of results for each destination/source
# (initialised in processOptions())
my %Summary;
# name of placeholder indicating result of whole destination
# - shouldn't be a possible/likely file/dir name
my $DestResult = '<bs-dest-result>';

# Arrays and hashes defining types of options
# All options
my @AllOpt = qw(
    debug verbose loglevel test
    hbest dbest wbest mbest ybest
    safe calendar strict
    config destination spec template source
    snapshot delete delete-cp
    dry-run version help
    stacktrace weekstart
    logfile lockfile 
    rsync-cmd rsync-opts remote-rsync-cmd
    include include-from exclude exclude-from
    expire-old
    bwlimit-in bwlimit-out
    status compress restart
    allow-restart ldcount
    all-failed some-failed
    min-interval
    );
my %AllOpt = (map {$_ => 1} @AllOpt);
# Required options (not including those that have a default value)
#my @ReqOpt = qw(destination source template lockfile spec);
# also not including DestReqOpt ones
my @ReqOpt = qw(destination lockfile);
my %ReqOpt = (map {$_ => 1} @ReqOpt);
# Multi-value options (are also all string options)
my %MultiOpt = (map {$_ => 1} qw(source include include-from
    exclude exclude-from destination));
# Boolean options
my @BoolOpt  = qw(safe calendar snapshot delete delete-cp dry-run 
    stacktrace version expire-old status compress restart allow-restart);
my %BoolOpt = (map {$_ => 1} @BoolOpt);
# String options (NOT the multi-value ones, which are dealt with separately)
my @StringOpt = qw(config lockfile logfile template
    rsync-cmd rsync-opts remote-rsync-cmd
    all-failed some-failed);
my %StringOpt = (map {$_ => 1} @StringOpt);
# Numeric options
my @NumericOpt = qw(debug verbose loglevel test
    hbest dbest wbest mbest ybest 
    weekstart bwlimit-in bwlimit-out 
    ldcount min-interval);
my %NumericOpt = (map {$_ => 1} @NumericOpt);
# Level options (take values 0..9)
my @LevelOpt = qw(verbose loglevel debug);
my %LevelOpt = (map {$_ => 1} @LevelOpt);

# Contexts
# --------

# Valid contexts and nesting thereof:
my %ValidContext = (general=>1, destination=>1, source=>1);
my %AllowedContext = (
    general     => {source=>1, destination=>1},
    destination => {source=>1},
    source      => {},
);
# Matrix defining which contexts each option is allowed in
# (no spec within destination -- spec is only parsed once)
my %Matrix = (
	general => {map {$_ => 1} @AllOpt},      # all allowed
	destination => {map {$_ => 1} qw(
        hbest dbest wbest mbest ybest
        safe calendar strict
        source template spec
        include include-from exclude exclude-from   
        snapshot delete delete-cp
        weekstart
        rsync-cmd rsync-opts remote-rsync-cmd
        expire-old
        bwlimit-in bwlimit-out
        compress restart
        allow-restart ldcount
        all-failed some-failed
        min-interval
        verbose loglevel debug stacktrace
    )},     # later?  template, spec
    # some dest-related options can be specified per-source
    # so that each dest-source combination can be different
	source => {map {$_ => 1} qw(
        rsync-cmd rsync-opts remote-rsync-cmd
        include include-from exclude exclude-from
        bwlimit-in bwlimit-out
        compress restart
        allow-restart 
        min-interval
        verbose loglevel debug stacktrace
    )},
);
# Required options for each destination
# (not including those that have a default value)
my @DestReqOpt = qw(source template spec);
my %DestReqOpt = (map {$_ => 1} @ReqOpt);

# Suffix used to indicate that a snapshot is incomplete
my $PartialSuffix = 'x';  

# Mainline code is at the end of this file

#===================================================================================================
# Logging

sub printit ($;$) {
    # Print depending on the level of verbose
    # (trailing newline to be supplied)
    my $text  = shift;
    my $level = shift // 1;
    print $text if $Opt{verbose} >= $level;
}

# --------------------------------------------------------------------------------------------------

sub logit ($;$) {
    # Simple logging to a text file,
    # preserving newlines in the text 
    # while adding a timestamp
    return if !defined $Opt{validLogfile};
    my $text  = shift;
    my $level = shift // 1;
    return if $Opt{loglevel} < $level;
    (my $leadingnl, $text) = ($text =~ m/^(\n*)(.*?)\n*$/s);
    $text =~ s/\n/\n                  /gs;
    my $now  = strftime "%y/%m/%d %H:%M:%S ", localtime;
    my $oldfh = select LOGFILE;
    $| = 1;
    open  LOGFILE, '>>', "$Opt{validLogfile}" or die "Unable to write to logfile $Opt{validLogfile}";
    print LOGFILE "${leadingnl}${now}${text}\n";
    close LOGFILE;
    select $oldfh;
}

# --------------------------------------------------------------------------------------------------

sub printlog ($;$$) {
    # Print and log depending on the level of verbose
    # (trailing newline to be supplied)
    my $text   = shift;
    my $plevel = shift // 1;
    my $llevel = shift // $plevel;
    print "$text" if $Opt{verbose} >= $plevel;
    logit $text, $llevel;
}

# --------------------------------------------------------------------------------------------------

sub debug ($;$) {
    # Print debugging information to STDOUT and log
    # depending on the level of verbosity
    # (trailing new lines supplied if required)
    my $text  = shift;
    my $level = shift // 1;
    if ($Opt{debug} >= $level) {
        (my $leadingnl, $text) = ($text =~ m/^(\n?)(.*)$/s); 
        print "${leadingnl}dbg: $text";
        logit "${leadingnl}dbg: $text", 0; 
    }   
}

# --------------------------------------------------------------------------------------------------
    
sub warning ($) {
    # Output a warning to STDERR and log
    my $text = shift;
    logit "WARNING: $text", 1;
    warn $text;
}

#===================================================================================================

# Useful stuff

# Simple min/max routines for use with numbers
sub min ($$) {
    my $a = shift;
    my $b = shift;
    return ($a < $b) ? $a : $b;
}
sub max ($$) {
    my $a = shift;
    my $b = shift;
    return ($a > $b) ? $a : $b;
}

#---------------------------------------------------------------------------------------------------

sub bytes ($) {
    # Simple routine for displaying a file size
    # Return '' if size is zero or less
    # (it could be -1 for a new snapshot during a dry-run)
    my $n = shift;
    return '' if $n <= 0;
    my $base = 1024;
    my @suffix = ('B', 'kiB', 'MiB', 'GiB', 'TiB');
    my $mult = 0;
    while (abs($n) > $base) {
        $n /= $base;
        $mult += 1;
    }
    return sprintf(
        ($n == floor($n)) ? "%s%d %s" : "%s%.2f %s", 
        ($n < 0) ? '-' : '', abs($n), $suffix[$mult]
    );
}

#---------------------------------------------------------------------------------------------------

sub combinations ($@) {
    # Return all ways of choosing $n items from @list
    my $n    = shift;  
    my @list = @_;
    my @combs;
    my $generator = Math::Combinatorics->new(count => $n, data => [@list],);
    while (my @combo = $generator->next_combination) {
        # (elements in @combo are in same order as in @list)
        push @combs, [@combo];
    }
    return @combs;
}

#---------------------------------------------------------------------------------------------------

sub stripQuotes ($) {
    # If the user has enclosed the option in single or double quotes,  
    # we'll strip them off (and add single quotes later).
    # If there are more than one set, e.g. '"string"' or "'string'",
    # assume that the string is really supposed to have the inner
    # set as part of its value.
    # Any other quotes, such as abc'def or xyz" will also be treated
    # as part of the value.
    # And double quotes will be escaped, ready for the string to
    # be wrapped in double quotes when used in the rsync command.
    # Also strips surrounding white-space, e.g. | str ing  | -> |str ing|
    my $string = shift;
    die "stripQuotes -- $string is a reference!!" if ref($string);
    my $temp = $string; # just for debugging
    $string =~ s/^\s+//;                # strip leading white-space
    $string =~ s/\s+$//;                # strip trailing white-space
    if (!($string =~ s/^'(.*)'$/$1/)) { # strip single quotes
        $string =~ s/^"(.*)"$/$1/;      # strip double quotes if no singles
    }
    $string =~ s/^\s+//;                # strip white-space again
    $string =~ s/\s+$//;
    $string =~ s/\"/\\\"/g;             # escape double quotes
    #$string =~ s/\\#/#/g;               # UNescape # that had to be escaped for Config::General  FIXME still required?
    debug "sQ: |$temp| -> |$string|\n", 9;
    return $string;
}

#---------------------------------------------------------------------------------------------------

sub dumpSnapshot ($) {
    # Return a printable version of a %S entry
    my $s = shift;
    return "$s (" . time2stamp($s) . ") => {name=>$S{$s}{name} path=>$S{$s}{path} " 
        . "fullname=>$S{$s}{fullname} partial=>$S{$s}{partial} size=>$S{$s}{size} "
        . "remote=>$S{$s}{remote} daemon=>$S{$s}{daemon}}";
}

#---------------------------------------------------------------------------------------------------

sub dumpSnapshots (@) {
    # Return a list of snapshots as a string for printing
    my @S = @_; 
    return join(', ', map {time2stamp($_)} @S);
}

#---------------------------------------------------------------------------------------------------

sub dumpSnapshots2 (\@) {
    # Return a list of snapshots as a string for printing
    # This version also uses %S to mark snapshots as good or bad
    my @S = @{(shift)};
    return join(', ', map {time2stamp($_) . ($S{$_}{partial} ? '-b' : '-g')} @S);
}

#---------------------------------------------------------------------------------------------------

sub rsort (@) {
    # Simple numeric reverse sort
    return sort {$b <=> $a} @_;
}

#---------------------------------------------------------------------------------------------------

sub fmtFreq ($$) {
    # Format the frequency as either a range or a single number
    my $freqmin = shift;
    my $freqmax = shift;
    if ($freqmin == $freqmax) {
        return "$freqmin";
    } else {
        return "$freqmin-$freqmax";
    }
}

#---------------------------------------------------------------------------------------------------

sub diskSpace ($) {
    # Convert a file size to the space used on the disk
    # by rounding it up to a multiple of the block size
    # NOTE: we assume a blocksize of 512 -- that's good enough, as this is only for displaying
    #       the approximate space used by a snapshot, and getting the real blocksize
    #       is probably impossible since we want to use rsync for everything.
    my $size = shift;
    my $blocksize = 512;
    return ceil($size / 512) * 512; 
}

# Date/time routines ===============================================================================

sub fmtHours ($) {
    # pretty-print a time period given in hours
    my $hours = shift;
    my $delta = "0:0:0:0:$hours:0:0";
    debug "fH: hours=$hours delta=$delta\n", 9;
    $delta = DateCalc($delta, "0:0:0:0:0:0:0", 1);  # normalise it
    my ($y, $M, $w, $d, $h, $m, $s) = split /:/, $delta;
    my @bits = split /:/, $delta;
    my $result = '';
    $result .= "$y years "   if $y != 0;
    $result .= "$M months "  if $M != 0; 
    $result .= "$w weeks "   if $w != 0; 
    $result .= "$d days "    if $d != 0; 
    $result .= "$h hours "   if $h != 0; 
    $result .= "$m minutes " if $m != 0; 
    $result .= "$s seconds " if $s != 0; 
    chop($result);  # trim final space    
    return $result;
}

#---------------------------------------------------------------------------------------------------

sub time2date ($) {
    # Convert a Unix timestamp to a Date::Manip date
    my $ts = shift;
    #my $date = new Date::Manip::Date;
    #my $err  = $date->parse("epoch $ts");
    #return $date;
    # this suddenly stopped working:
    return ParseDateString("epoch $ts");
}

#---------------------------------------------------------------------------------------------------

sub date2time ($) {
    # Convert a Date::Manip date to a Unix timestamp
    my $date = shift;
    return UnixDate($date, '%s');
}

#---------------------------------------------------------------------------------------------------

sub leapYear ($) {
    # Simple routine that assumes we're running sometime
    # between 2001 and 2099.
    # Returns 1 for a leap year, else 0
    my $moment = shift;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($moment);
    return (($year+1900 % 4) == 0);
}

#---------------------------------------------------------------------------------------------------

sub daysInYearMonth ($$) {
    # Return the number of days in the month specified by year and month number (0..11)
    my $y = shift;
    my $m = shift;
    my $days = $DiM[$m];
    $days += 1 if ($m == 1 and leapYear($y));
    return $days;
}

#---------------------------------------------------------------------------------------------------

sub daysInMonth ($) {
    # Return the number of days in the month in which 
    # the specified moment falls
    my $moment = shift;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($moment);
    return daysInYearMonth($year+1900, $mon);
}

#---------------------------------------------------------------------------------------------------

sub daysInYear ($) {
    # Return the number of days in the year 
    # in which the specified moment falls.
    my $moment = shift;
    return leapYear($moment) ? 366 : 365;
}

#---------------------------------------------------------------------------------------------------

sub aligned ($$) {
    # Return true if timesofar is a multiple
    # of the given period
    # (taking a month as 4 weeks)
    my $timesofar = shift;
    my $periodn   = shift;
    return ($timesofar % $Hours[$periodn]) == 0;
}

#---------------------------------------------------------------------------------------------------

# Timestamp format for snapshots is YYYYMMDD-hhmmss
# as defined by STAMPFMT and hard-coded in the following subroutine.

sub stamp2time ($) {
    # convert filename-type timestamp to Unix time
    my $stamp = shift;
    if ($stamp =~ /(?<Y>\d\d\d\d)(?<M>\d\d)(?<D>\d\d)-(?<h>\d\d)(?<m>\d\d)(?<s>\d\d)/) {
        return timelocal($+{s},$+{m},$+{h},$+{D},$+{M}-1,$+{Y});
    }
    debug "stamp2time: WARNING -- invalid stamp '$stamp' -- returning 0\n", 1;
    return 0;
}

#---------------------------------------------------------------------------------------------------

sub time2stamp ($) {
    # convert Unix time to filename timestamp
    my $time = shift;
    return STAMPFMT0 if !$time or $time == 0;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($time);
    return strftime(STAMPFMT, localtime($time));
}

#---------------------------------------------------------------------------------------------------

sub time2stampz ($) {
    # convert Unix time to filename timestamp, including timezone
    my $time = shift;
    return STAMPFMT0.'+0000' if !$time or $time == 0;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($time);
    return strftime(STAMPFMT.'%z', localtime($time));
}

#---------------------------------------------------------------------------------------------------

sub pair2range ($$) {
    # Convert a beginning/end pair of Unix times to a readable range
    my $beg = shift;
    my $end = shift;
    return time2stamp($beg) . '--' . time2stamp($end);
}

#---------------------------------------------------------------------------------------------------

sub fullName ($) {
    # Return the full version of an option name
    # (most of this is done by GetOptions, so here we only deal with
    #  options 'source' and 'destination' (i.e. contexts)
    my $name = shift;
    my @fullnames = keys %ValidContext;    #('destination', 'source');
    foreach my $fullname (@fullnames) {
        return $fullname if $fullname =~ /^$name/i;
    }
    return "\L$name";   
}

#===================================================================================================
# Handlings specs

sub calcPadding ($$$) {
    # Given a period level and a higher level and a timesofar,
    # return the number of low-levels needed to get to the next high-level
    # e.g. ('d', 'm', 23days) returns 5 (days)
    # except that the levels are given numerically
    # FIXME need to do proper month lengths in --calendar mode
    my $level1    = shift;
    my $level2    = shift;
    my $timesofar = shift;  # Time, counting backwards from 'now' in hours,
                            # that is already accounted for by previous specs
    my $length1 = $Hours[$level1];
    my $length2 = $Hours[$level2];  # FIXME: calculate months and years properly -- if we know which month we're talking about
    # FIXME !!!!!!!!!!! this is where we're stuck -- so timesofar needs to be a Unix time
    my $result = ($length2 - ($timesofar % $length2)) / $length1;
    debug "cP: l1=$level1 l2=$level2 tsf=$timesofar; returning $result\n", 3;
    if ($result != floor($result)) {
        debug "cP: auto-padded spec is not aligned!\n", 1;
    }
    return floor($result);
}

#---------------------------------------------------------------------------------------------------

sub parseSpecs2 ($) {   # TODO finish this
    # TODO create test cases to fettle all the problem cases
    # New version -- doesn't do padding, -- that's now delayed and done in compileSpecs
    # Parse the user's requested snapshot regime, 
    # e.g. '0-4d7,1d7,2-7w,1m6'
    #
    # The letter specifies a period, and can be
    #   h - hour 
    #   d - day
    #   w - week
    #   m - month
    #   y - year
    # The first number ('freq') specifies how many snapshots should occur
    # within the period, the second how many periods.
    # The frequency can also be specified as a minimum-maximum range.
    # If the second number ('count') is omitted, it fills up the time
    # until the next spec; on the last spec, omitting the count
    # requests an 'unlimited' number of backups -- i.e. until the
    # backup disk is full.

    my $rawspec = lc(shift);
    my $now     = shift;
    debug "pS: rawspec = $rawspec\n", 2;

    my @rawspecs = split /,/, $rawspec;
    my @specs = ();
    my $warningcount = 0;
    my $errorcount   = 0;

    foreach my $spec (@rawspecs) {
        if ($spec =~ /^\s*(?<freqmin>\d+)\s*(-\s*(?<freqmax>\d+))?\s*(?<period>[hdwmy])\s*(?<count>\d*)\s*$/) {
            my $freqmin = int($+{freqmin});
            my $freqmax = $freqmin;
            if ($+{freqmax}) {
                # min-max frequency specified
                $freqmax = int($+{freqmax});
            }
            if ($freqmax == 0) {
                printlog "ERROR: Frequency 0 in spec '$spec' does not make sense\n", 1;
                $errorcount += 1;
                next;
            }
            if ($freqmax < $freqmin) {
                printlog "ERROR: Maximum frequency must be greater than minimum: \n", 1;
                printlog "       '$freqmin-$freqmax' in spec '$spec' does not make sense\n", 1;
                $errorcount += 1;
                next;
            }
            my $period = $+{period};
            my $count; 
            if ($+{count} ne '') { 
                $count = int($+{count});
                if ($count == 0) {
                    printlog "ERROR: Count 0 in spec '$spec' will make no snapshots\n", 1;
                    $errorcount += 1;
                    next;
                }
            } else {
                # no count specified -- will use padding; set to 0 for now
                $count = 0;
            }   
            push @specs, {
                rawspec => $spec, 
                freqmin => $freqmin, 
                freqmax => $freqmax, 
                period  => $period, 
                periodn => $Level{$period}, # store $Level{$2} as well as $2 to avoid repeated look-ups
                count   => $count,
            };  
        } else {
            printlog "ERROR: Invalid spec '$spec'\n", 1;
            $errorcount += 1;
        }
    }

    return ($warningcount, $errorcount, @specs) if $errorcount;

    debug "pS: Parsed spec:  " . join(',', 
        map {fmtFreq($_->{freqmin}, $_->{freqmax}) . $_->{period} . $_->{count}} @specs) . "\n", 3;

    # Check that the specs make sense
    debug "pS: Checking specs...\n", 3;
    my $timesofar = 0; # in hours (because they're the smallest interval that we use)
    my $i = 0; # index into @specs
    foreach my $spec (@specs) {
        debug "pS: Spec0: $spec->{freqmin}-$spec->{freqmax} $spec->{period} $spec->{count}     \n", 4;
        if ($spec->{count} == 0) {
            # Pad spec to fill next period
            # e.g. 1d,1w4 -- the daily period gets padded to a week, i.e. 1d7,1w4
            # This is done even if --calendar is false.
            if ($i == $#specs) {
                # last spec -- can't pad, so set count to lots
                printlog "NOTE: last spec padded forever\n", 3;
                $spec->{count} = UNLIMITED; 
            } elsif ($specs[$i+1]->{periodn} <= $spec->{periodn}) {
                printlog "WARNING: Can not pad spec $spec->{rawspec} because next spec is " .
                    "not at a higher level; count set to 1\n", 1;
                $warningcount += 1;
                $spec->{count} = 1;
            } else {
                my $padding = calcPadding($spec->{periodn}, $specs[$i+1]->{periodn}, $timesofar);
                debug "pS: padding $spec->{rawspec} to $LevelName[$specs[$i+1]->{periodn}]\n", 3;
                if ($padding == 0) {
                    # already at a multiple, so just do either 0 or a whole
                    # set of the next spec 
                    # leave at 0 for now
                    debug "No padding -- stay at 0\n", 3;
                } else {
                    # timesofar is not a whole multiple of speclevel+1, add some padding
                    debug "pS: padding by setting count to $padding\n", 3;
                    $spec->{count} = $padding;
                }
            }
        }
        debug "pS: Spec1: $spec->{freqmin}-$spec->{freqmax} $spec->{period} $spec->{count}\n", 9;
        # Check alignment
        if (!aligned($timesofar, $spec->{periodn})) {
            printlog "WARNING: Spec at $LevelName[$spec->{periodn}] level is not aligned - " 
                . " it starts at " . fmtHours($timesofar) . "\n", 1;
            $warningcount += 1;
        }
        $i += 1;
    }

    # Check that interval increases 
    my $lastint  = 0;
    $i = 0;
    foreach my $spec (@specs) {
        my $int = $Hours[$spec->{periodn}] / $spec->{freqmax};  # yes, use max
        if ($int < $lastint) {
            printlog "WARNING: Interval is smaller for spec " . ($i+2) . 
                " ($spec->{rawspec}) than for " .  "previous one ($specs[$i-1]->{rawspec})\n", 3;
            $warningcount += 1;
        }
        $lastint = $int;
        $i += 1;
    }

    if (!$errorcount) {
        printlog "Validated specs: " . join(',', 
            map {fmtFreq($_->{freqmin}, $_->{freqmax}) . $_->{period} . $_->{count}} @specs) . "\n", 3;
        my $TotalSnapshotsMin = 0; 
        my $TotalSnapshotsMax = 0; 
        foreach my $spec (@specs) {
            $TotalSnapshotsMin += $spec->{freqmin} * $spec->{count};
            $TotalSnapshotsMax += $spec->{freqmax} * $spec->{count};
        }
        if ($specs[-1]->{count} == UNLIMITED) {
            printlog "which will create an unlimited number of snapshots\n", 3;
        } else {
            if ($TotalSnapshotsMin == $TotalSnapshotsMax) {
                printlog "which will create a total of $TotalSnapshotsMax snapshots\n", 3;
            } else {
                printlog "which will create a total of between $TotalSnapshotsMin and $TotalSnapshotsMax snapshots\n", 3;
            }
        }
    }
    debug "pS: Frequencies: " . join(', ', map {$_->{freqmax} / $Hours[$_->{periodn}]} @specs) . "\n", 9;

    return $warningcount, $errorcount, @specs;  
}

#---------------------------------------------------------------------------------------------------

sub parseSpecs ($) {
    # Parse the user's requested snapshot regime, 
    # e.g. '0-4d7,1d7,2-7w,1m6'
    #
    # The letter specifies a period, and can be
    #   h - hour 
    #   d - day
    #   w - week
    #   m - month
    #   y - year
    # The first number ('freq') specifies how many snapshots should occur
    # within the period, the second how many periods.
    # The frequency can also be specified as a minimum-maximum range.
    # If the second number ('count') is omitted, it fills up the time
    # until the next spec; on the last spec, omitting the count
    # requests an 'unlimited' number of backups -- i.e. until the
    # backup disk is full.

    my $rawspec = lc(shift);
    debug "pS: rawspec = $rawspec\n", 2;

    my @rawspecs = split /,/, $rawspec;
    my @specs = ();
    my $warningcount = 0;
    my $errorcount   = 0;

    foreach my $spec (@rawspecs) {
        if ($spec =~ /^$specRegex$/x) {
            my $freqmin = int($+{freqmin});
            my $freqmax = $freqmin;
            if ($+{freqmax}) {
                # min-max frequency specified
                $freqmax = int($+{freqmax});
            }
            if ($freqmax == 0) {
                printlog "ERROR: Frequency 0 in spec '$spec' does not make sense\n", 1;
                $errorcount += 1;
                next;
            }
            if ($freqmax < $freqmin) {
                printlog "ERROR: Maximum frequency must be greater than minimum: \n", 1;
                printlog "       '$freqmin-$freqmax' in spec '$spec' does not make sense\n", 1;
                $errorcount += 1;
            }
            my $period = $+{period};
            my $count; 
            if ($+{count} ne '') { 
                $count = int($+{count});
                if ($count == 0) {
                    printlog "ERROR: Count 0 in spec '$spec' will make no snapshots\n", 1;
                    $errorcount += 1;
                    next;
                }
            } else {
                # no count specified -- will use padding; set to 0 for now
                $count = 0;
            }   
            push @specs, {
                rawspec => $spec, 
                freqmin => $freqmin, 
                freqmax => $freqmax, 
                period  => $period, 
                periodn => $Level{$period}, # for convenience
                count   => $count,
            };  
        } else {
            printlog "ERROR: Invalid spec '$spec'\n", 1;
            $errorcount += 1;
        }
    }

    return ($warningcount, $errorcount, @specs) if $errorcount;

    debug "pS: Parsed spec:  " . join(',', 
        map {fmtFreq($_->{freqmin}, $_->{freqmax}) . $_->{period} . $_->{count}} @specs) . "\n", 3;

    # Check that the specs make sense
    debug "pS: Checking specs...\n", 3;
    my $timesofar = 0; # in hours (because they're the smallest interval that we use)
    my $i = 0; # index into @specs
    foreach my $spec (@specs) {
        debug "pS: Spec0: $spec->{freqmin}-$spec->{freqmax} " . 
            "$spec->{period} $spec->{count}     \n", 4;
        if ($spec->{count} == 0) {
            # Pad spec to fill next period
            # e.g. 1d,1w4 -- the daily period gets padded to a week, i.e. 1d7,1w4
            # This is done even if --calendar is false.
            if ($i == $#specs) {
                # last spec -- can't pad, so set count to lots
                printlog "NOTE: last spec padded forever\n", 3;
                $spec->{count} = UNLIMITED; 
            } elsif ($specs[$i+1]->{periodn} <= $spec->{periodn}) {
                #printlog "WARNING: Can not pad spec $spec->{rawspec} because next spec is " .
                #    "not at a higher level; count set to 1\n", 1;
                #$warningcount += 1;
                $spec->{count} = 1;
            } else {
                my $padding = calcPadding($spec->{periodn}, $specs[$i+1]->{periodn}, $timesofar);
                debug "pS: padding $spec->{rawspec} to $LevelName[$specs[$i+1]->{periodn}]\n", 3;
                if ($padding == 0) {
                    # already at a multiple, so just do either 0 or a whole
                    # set of the next spec 
                    # leave at 0 for now
                    debug "pS: No padding -- stay at 0\n", 3;
                } else {
                    # timesofar is not a whole multiple of speclevel+1, add some padding
                    debug "pS: padding by setting count to $padding\n", 3;
                    $spec->{count} = $padding;
                }
            }
        }
        debug "pS: Spec1: $spec->{freqmin}-$spec->{freqmax} $spec->{period} $spec->{count}\n", 9;
        # Check alignment
        if (!aligned($timesofar, $spec->{periodn})) {
            printlog "WARNING: Spec at $LevelName[$spec->{periodn}] level is not aligned - " 
                . " it starts at " . fmtHours($timesofar) . "\n", 1;
            $warningcount += 1;
        }
        $i += 1;
    }

    # Check that interval increases 
    my $lastint  = 0;
    $i = 0;
    foreach my $spec (@specs) {
        my $int = $Hours[$spec->{periodn}] / $spec->{freqmax};  # yes, use max
        if ($int < $lastint) {
            printlog "WARNING: Interval is smaller for spec " . ($i+2) . 
                " ($spec->{rawspec}) than for " .  "previous one ($specs[$i-1]->{rawspec})\n", 3;
            $warningcount += 1;
        }
        $lastint = $int;
        $i += 1;
    }

    if (!$errorcount) {
        printlog "Validated specs: " . join(',', 
            map {fmtFreq($_->{freqmin}, $_->{freqmax}) . $_->{period} . $_->{count}} @specs) . 
            "\n", 3;
        my $TotalSnapshotsMin = 0; 
        my $TotalSnapshotsMax = 0; 
        foreach my $spec (@specs) {
            $TotalSnapshotsMin += $spec->{freqmin} * $spec->{count};
            $TotalSnapshotsMax += $spec->{freqmax} * $spec->{count};
        }
        if ($specs[-1]->{count} == UNLIMITED) {
            printlog "which will create an unlimited number of snapshots\n", 3;
        } else {
            if ($TotalSnapshotsMin == $TotalSnapshotsMax) {
                printlog "which will create a total of $TotalSnapshotsMax snapshots\n", 3;
            } else {
                printlog "which will create a total of between $TotalSnapshotsMin and " . 
                    "$TotalSnapshotsMax snapshots\n", 3;
            }
        }
    }
    debug "pS: Frequencies: " . 
        join(', ', map {$_->{freqmax} / $Hours[$_->{periodn}]} @specs) . "\n", 9;

    return $warningcount, $errorcount, @specs;  
}

#---------------------------------------------------------------------------------------------------

sub processSpecs ($) {
    # Validate the specs given 
    my $spec = shift;
    my ($warnings, $errors, @specs) = parseSpecs($spec); 
    my $msg;
    if ($errors) {
        $msg = "ERROR: One or more specs is invalid -- stopping";
    }
    if ($warnings and $Opt{strict}) {
        $msg = "ERROR: Warnings when parsing specs, and strict mode in effect -- stopping";
    }
#    if (!@specs) {
#        $msg =  "ERROR: No valid specs found -- stopping";
#    }
    return ($warnings, $errors, $msg, @specs);
}

#===================================================================================================

# Options 
# - defaults are in %defopt
# - then read command line options (including config file name) into %cmdopt
# - then read config file (if any) into %confopt
# - then merge defaults, config file, and command line options
# - then validate

#---------------------------------------------------------------------------------------------------

sub checkOptionSingle ($$) {
    # Check a single option/value for validity, returning the error and warning counts, 
    # and the possibly modified value.
    # Also returns any error/warning messages.
    # Doesn't do any cross-checking.
    my $option = shift;
    my $value  = shift;

    my $e   = 0;    # errors
    my $w   = 0;    # warnings
    my $msg = '';   # message(s)

    debug "cOS: option=$option value='$value'\n", 9;
    if ($StringOpt{$option} or $MultiOpt{$option}) {    # Multi options are also strings
        # String options -- sort out any quotes
        $value = stripQuotes($value);
    } elsif ($LevelOpt{$option}) {
        # Output levels
        if (!looks_like_number($value)) {
            $msg .= "WARNING: Option '$option' should be a number from 1 to 9 -- value '$value'" .
               " treated as '1'\n";
            $value = 1;
            $w += 1;
        } else {
            $value = int($value);
            $value = 0 if $value < 0;
        }
    } elsif ($BoolOpt{$option}) {
        # Boolean options -- mimicking what GetOption::Long does
        my %bool = (true  => 1, yes => 1, on  => 1, 1 => 1, '1' => 1,
                    false => 0, no  => 0, off => 0, 0 => 0, '0' => 0);
        $value = lc($value);
        if (exists $bool{$value}) {
            $value = $bool{$value};
        } else {
            $msg .=  "ERROR: Invalid option: '$option' must be true/yes/on/1 or " . 
                "false/no/off/0, not '$value'\n";
            $e += 1;
        }
    } elsif ($NumericOpt{$option}) {
        if (looks_like_number($value)) {
            $value = $value + 0;    # make it really numeric
        } else {
            $msg .=  "ERROR: Invalid option: '$option' must be numeric, not '$value'\n";
            $e += 1;
        }
    }

    if ($e == 0) {
        # Do option-specific checks
        for ($option) {
            # 'Best' options
            when ('hbest') {
                if (!($value >= 0 and $value <= 59)) {
                    $msg .=  "ERROR: Invalid option: 'hbest' must be a whole number between" . 
                        " 0 and 59, not '$value'\n";
                    $e += 1;
                }
            }
            when ('dbest') {
                if (!($value >= 0 and $value < 24.0)) {
                    $msg .=  "ERROR: Invalid option: 'dbest' must be a number between 0 and" . 
                        " 23.9, not '$value'\n";
                    $e += 1;
                }
            }
            when ('wbest') {
                if (!($value >= 1 and $value <= 7)) {
                    $msg .=  "ERROR: Invalid option: 'wbest' must be a whole number between" . 
                        " 1 and 7 (1=Sunday, 7=Saturday), not '$value'\n";
                    $e += 1;
                }
            }
            when ('mbest') { 
                if (!($value >= 1 and $value <= 31)) {
                    # (31 gives the last day of any month)
                    $msg .=  "ERROR: Invalid option: 'mbest' must be a whole number between" . 
                        " 1 and 31, not '$value'\n";
                    $e += 1;
                }
            }
            when ('ybest') { 
                if (!($value >= 1 and $value <= 366)) {
                    # (366 gives the last day of the year, whether a leap year or not)
                    $msg .=  "ERROR: Invalid option: 'ybest' must be a whole number between" .
                        " 1 and 366, not '$value'\n";
                    $e += 1;
                }
            }
            # Week start - an integer from 1=Sunday to 7=Saturday
            # (which is the same as $Opt{wbest} but different from localtime's $wday)
            when ('weekstart') {
                $value = 1 if !defined $value;
                $value = int($value);
                $value = (($value-1) % 7) + 1;  # force it into range
            }
            # Link-dest count -- positive integer
            when ('ldcount') {
                $value = int($value);
                if ($value < 0) {
                    $msg .=  "ERROR: Invalid option: 'ldcount' must be a positive whole number, " .
                        "not '$value'\n";
                    $e += 1;
                } elsif ($value == 0) {
                    $msg .=  "WARNING: Option 'ldcount' is zero -- no hard-linking will be done,\n";
                    $msg .=  "         and the snapshot created may be much larger than expected\n";
                    $w += 1;
                }
            }
            # Band-width limits (0 = unlimited)
            when (['bwlimit-in', 'bwlimit-out']) {
                if (!looks_like_number($value) or $value < 0) {
                    $msg .=  "ERROR: Invalid option: '$option' must be zero or a positive whole" . 
                        " number (in kbps), not '$value'\n";
                    $e += 1;
                } else {
                    $value = floor($value);
                }
            }
            # Actions to take if some or all sources are not backed up
            when (['all-failed', 'some-failed']) {
                if (index('keep', lc($value)) == 0) {   # allow abbreviations
                    $value = 'keep';
                } elsif (index('delete', lc($value)) == 0) {    # ditto
                    $value = 'delete';
                } else {
                    $msg .=  "ERROR: Invalid option: '$option' must be either 'keep' or" . 
                        " 'delete', not '$value'\n";
                    $e += 1;
                }
            }
            # Minimum interval between snapshots (in minutes)
            when ('min-interval') {
                if (!looks_like_number($value) or $value < 1) {
                    $msg .=  "ERROR: Invalid option: 'min-interval' must be a positive number" . 
                        " of minutes, not '$value'\n";
                    $e += 1;
                }
            }
            # Specs -- just check syntax
            when ('spec') {
                if (!($value =~ /^$specRegex(,$specRegex)*$/x)) {
#                if (!($value =~ /\d[hdmwy](,\d[hdmwy])*/x)) {
                    $msg .= "ERROR: Spec '$value' is not valid\n";
                    $e += 1;
                }
            }

            # Source and destination are done later

            # Options 'include', 'include-from', 'exclude', 'exclude-from'
            # - these are not checked at all, just passed to rsync
        }
    }

    chomp($msg);
    #debug "cOS: returning e=$e w=$w value='$value' msg=$msg\n", 1;
    return ($e, $w, $value, $msg);
}

#---------------------------------------------------------------------------------------------------

sub getOptionsFromArray ($$$) {
    # Process command-line-like array of options into a hash,
    # using the global list of definitions
    my $argRef     = shift;
    my $optRef     = shift;
    my $GOarrayRef = shift;
    debug "gOFA: args=@$argRef\n", 9;
    my $rc = 0;
    my @GOFAerrors;
    local $SIG{__WARN__} = sub { push @GOFAerrors, @_; };
    if (!GetOptionsFromArray($argRef, $optRef, @$GOarrayRef)) {
        # Print the error messages
        foreach my $error (@GOFAerrors) {
            printlog "ERROR (GOFA ".__LINE__."): $error", 1;
        }
        $rc = @GOFAerrors;  # error count
    }
    return $rc;
}

#---------------------------------------------------------------------------------------------------

sub readConfig ($$) { 
    # Read in options from the given configuration filename
    # with a mixture of custom-validation and GetOptionsFromArray.
    # Returns non-zero if there were any errors,
    # and the hash of config file options.

    # Parse the config file, extracting options and values
    # The format is home-made and simple:
    # Definition:
    #   - ignore blank lines, and lines with first non-whitespace '#' (comments)
    #   - strip leading and trailing whitespace of whole line
    #   - option lines are of the form
    #       option  whitespace|:|= value
    #       option
    #       <option whitespace|:|= value>
    #           # options in new context go here
    #       </option>
    #   - option is non-whitespace i.e. a single word, with any leading - or -- stripped
    #   - value has surrounding whitespace stripped, but otherwise is anything
    #   - only 'destination' and 'source' can be used as contexts (see %ValidContext).

    state $cfile      = shift;     # ('state' to allow use in nested sub)
    state $GOarrayRef = shift;
    state $lineno = 0;
    #debug "rC: cfile=$cfile GOarrayRef=$GOarrayRef\n", 9;
    
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    sub confLine {
        return "\nin configuration file '$cfile' at line $lineno\n";
    }

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    sub readContext {
        # Read options at the current level/context
        my $context = shift;
        my @options;
        # Hash to receive options from GOFA
        my %confopt;
        my $rc = 0;
        while (<CONFIG>) {  # to end of context or end of file
            chomp;
            $lineno += 1;
            debug "rc: config line $lineno is '$_'\n", 9;
            next if /^\s*$/;	# Skip blank lines
            next if /^\s*#/;	# Skip comments

            if (/^\s*-*(?<no>no-?)?(?<option>[[:alpha:]-]+)\s*[:=]?\s*(?<value>.+)?\s*$/) {
                # Plain option line with possible 'no' prefix
                my $option = fullName($+{option});
                my $value = $+{value} // '';
                if ($BoolOpt{$option}) {  # FIXME ? pass bools to GOFA as just =s
                    $value = $+{no} ? 0 : 1; 
                }
                (my $e, my $w, $value, my $msg) = checkOptionSingle($option, $value);
                #debug "rC: cOS returns $e, $w, '$value', '$msg'\n", 1;
                if (!$AllOpt{$option}) {
                    printlog "ERROR: Unknown option '$option'" . confLine(), 1;
                    $rc += 1;
                } elsif (!$Matrix{$context}{$option}) {
                    printlog "ERROR: Option '$option' not allowed within context '$context'" 
                        . confLine(), 1;
                    $rc += 1;
                } elsif ($e) {
                    printlog $msg . confLine(), 1,1;
                    $rc += $e; 
                } elsif ($ValidContext{$option}) {
                    # These are treated separately so that, for example,
                    #   destination d1
                    # is treated as
                    #   <destination d1></destination>
                    if (!$value) {
                        printlog "ERROR: Option '$option' must have a value " . confLine(), 1;
                        $rc += 1;
                    } else {
                        push @{$confopt{$option}}, {location => $value, options => {}};
                        debug "rC: adding simple source/dest '$value'\n", 9;
                    }
                } else {
                    # Simple option -- just add it to the list
                    # First, print any warnings
                    printlog $msg . confLine(), 1,1 if $w;
                    push @options, "--$option";
                    push @options, $value; # if $value;   # FIXME all values are 1 now -- GOFA will complain -- apparently it doesn't  -- change this?? to re-do the --no prefix?
                    debug "rC: $option = $value\n", 9;
                }

            } elsif (/^\s*<\s*(?<option>[[:alpha:]-]+)\s*[:=]?\s*(?<value>.+)?\s*>/) {
                # Start of new context
                my $option = fullName($+{option});
                my $value = $+{value} // '';
                debug "\nrC: >>>>>> new context=$option  \n", 9;
                if (!$ValidContext{$option}) {
                    printlog "ERROR: Unknown context '$option' -- context skipped" .
                        confLine(), 1;
                    $rc += 1;
                } elsif (!$AllowedContext{$context}{$option}) {
                    printlog "ERROR: Context '$option' not allowed within context '$context'" . 
                        " -- context skipped" . confLine(), 1;
                    $rc += 1;
                } else {
                    if (!$value) {
                        printlog "ERROR: Option '$option' must have a value" . 
                            confLine() . "\n", 1;
                        $rc += 1;
                    } else {
                        # OK, it's a valid context (source or destination) - recurse
                        my ($newrc, $newConfRef) = readContext($option);
                        push @{$confopt{$option}}, 
                            {location => $value, options => $newConfRef};
                        debug "rC: adding complex destination '$value'\n", 9;
                        $rc += $newrc;
                    }
                }

            } elsif (/^\s*<\/\s*(?<option>[[:alpha:]]*)[^>]*>/) {
                # End of context: ignore the name -- just match on any </...>
                if ($context eq 'general') {
                    # end of context is an error 
                    printlog "ERROR: Unmatched end-of-context: '$+{option}'" .
                        confLine(), 1;
                    $rc += 1;
                } else {
                    # Finish this level of recursion
                    debug "rC: <<<<<< end of context (option=$+{option})\n\n", 9;
                    last;
                }

            } else {
                printlog "ERROR: Invalid line: '$_'" . confLine(), 1;
                $rc += 1;
            }

        } # while

        # Call GOFA to merge @options with %confopt  NOO -- it's done already
        my $gofarc = getOptionsFromArray(\@options, \%confopt, $GOarrayRef);
        debug "rC: gofarc = $gofarc\n", 9;
        $rc += $gofarc;

        return ($rc, \%confopt);

    } # end of readContext()

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    if (!open CONFIG, '<', $cfile) {
        # Shouldn't happen as we've already tested for readability 
        printlog "ERROR: failed to open configuration file '$cfile'\n", 1;
        return (1, {});
    }
    my ($rc, $confoptRef) = readContext('general');
    close CONFIG;

    debug "rC: confopt:\n", 2;
    debug Dumper($confoptRef), 2;
    return ($rc, %$confoptRef);
}

#---------------------------------------------------------------------------------------------------

sub mergeOpts (@) {
    # Merge option hashes together
    my %Opt = %{(shift)};
    foreach my $nextoptref (@_) {
        foreach my $k (keys %$nextoptref) {
            $Opt{$k} = $nextoptref->{$k};
        }
    }
    return %Opt;
}

#---------------------------------------------------------------------------------------------------

sub processOptions () {

    # Default options hard-coded here
    # -------------------------------
    my %defopt = ();    # default options
    # output: for each of these, 0 means no (or minimal) output, 3 means lots, 
    # (higher values for debugging only)
    $defopt{debug}          = 0;
    $defopt{verbose}        = 1;
    $defopt{loglevel}       = 1;
    $defopt{test}           = 0;          # a non-zero value indicates which test to run
    # options to prefer one part of a period, e.g. 5pm, Fridays
    # defaults are at the end of the period 
    $defopt{hbest}          = 59;         # preferred time within an hour 0-59, integer
    $defopt{dbest}          = 23.99;      #                       a day 0-23.99, float
    $defopt{wbest}          = 7;          # preferred day within a week 1-7, integer, 1=Sun 7=Sat
    $defopt{mbest}          = 31;         # preferred day within a month 1-31  
    $defopt{ybest}          = 366;        # preferred day in the year
    # 
    $defopt{'all-failed'}   = 'delete';
    $defopt{'allow-restart'} = 1;   
    $defopt{'bwlimit-in'}   = 0;        
    $defopt{'bwlimit-out'}  = 0;
    $defopt{calendar}       = 1;
    $defopt{compress}       = 1;
    $defopt{delete}         = 1;
    $defopt{'delete-cp'}    = 1;
    $defopt{'dry-run'}      = 0;
    $defopt{'expire-old'}   = 0;          # expire oldest S's to make room, even when not unlimited
    $defopt{help}           = 0;
    $defopt{ldcount}        = 1;          # no. of link-dest options to create
    $defopt{'min-interval'} = 0;          # minutes between snapshots
    $defopt{restart}        = 0;
    $defopt{'rsync-cmd'}    = 'rsync';    # Should it be '/usr/bin/rsync'?
    $defopt{'rsync-opts'}   = '--hard-links --numeric-ids --archive --one-file-system';
    $defopt{safe}           = 1;        
    $defopt{snapshot}       = 1;
    $defopt{'some-failed'}  = 'keep';
    $defopt{stacktrace}     = 0;
    $defopt{status}         = 0;
    $defopt{strict}         = 0;
    $defopt{version}        = 0;
    $defopt{weekstart}      = 1;          # 1=Sunday
    # The following deliberately do not have defaults:
    #   template   source  lockfile   logfile   config  destination  spec
    #   include include-from exclude exclude-from
    #   remote-rsync-cmd

    my %confopt = ();   # config file options
    my %cmdopt = ();    # command line options

    my @GOarray = (     # array to pass to GetOptions and GetOptionsFromArray
            'all-failed=s',
            'allow-restart!',
            'bwlimit-in=f',
            'bwlimit-out=f',
            'calendar!',
            'compress!',
            'config=s',
            'dbest=f',
            'debug=i',      
            'delete!',
            'delete-cp!',
            'destination=s@',
            'dry-run!',
            'exclude-from=s@',
            'exclude=s@',
            'expire-old!',
            'hbest=i',
            'help!',
            'include-from=s@',
            'include=s@',
            'ldcount=i',
            'lockfile=s',
            'logfile=s',
            'loglevel=i',
            'mbest=i',
            'min-interval=f',
            'restart!',
            'rsync-cmd=s',
            'rsync-opts=s',
            'remote-rsync-cmd=s',
            'safe!',
            'snapshot!',
            'some-failed=s',
            'source=s@',
            'spec=s',
            'stacktrace!',
            'status!',
            'strict!',
            'template=s',
            'test=i',
            'verbose=s',
            'version',
            'wbest=i',
            'weekstart=i',
            'ybest=i',
    );

    # Block to limit the scope of the SIGWARN override which traps 
    # warnings from GetOptions
    {
        # Get command line options -- give up if any errors.
        my @GOwarnings;
        local $SIG{__WARN__} = sub { push @GOwarnings, @_; };
        my $GOok = GetOptions(\%cmdopt, @GOarray);
        printlog "ERROR(S) on command line: \n @GOwarnings\n", 1 if !$GOok;  
        #print Dumper(\%cmdopt);
        #print Dumper(\@ARGV);
        # FIXME eek! GO doesn't put things into cmdopt if it thinks they're invalid
        #  -- need to set all to =s??
        return 1 unless $GOok;  
    }

    my $errorcount = 0;
    my $warningcount = 0;

    # Validate command-line options
    foreach my $option (sort keys %cmdopt) {
        my ($e, $w, $value, $msg) = checkOptionSingle($option, $cmdopt{$option});
        #debug "pO: cOS returns $e, $w, '$value', '$msg'\n", 1;
        $errorcount += $e;
        $warningcount += $w;
        $cmdopt{$option} = $value;
        printlog "$msg (on command line)\n", 1 if $msg;
    }
    return $errorcount if $errorcount;

    # Tweak context options from command line
    # to make them into config-file structures
    foreach my $context (keys %ValidContext) {
        if ($cmdopt{$context}) {
            my @temp;
            foreach my $c (@{$cmdopt{$context}}) {
                push @temp, {location => $c, options => {}};
            }
            $cmdopt{$context} = \@temp;
        }
    }

    # If config file specified, check it and read it
    if ($cmdopt{config}) {
        $cmdopt{config} = absPath($cmdopt{config});
        if (-f $cmdopt{config} && -r _) {
            (my $rc, %confopt) = readConfig($cmdopt{config}, \@GOarray);    
            return $rc if $rc;
        } else {
            printlog "ERROR: Configuration file '$cmdopt{config}' can not be read\n", 1,1;
            return 1;
        }
    }

    debug "def  options: " . join(' ', 
        map {$_ . '=' . $defopt{$_}}  sort keys %defopt)  . "\n", 9;
    debug "conf options: " . join(' ', 
        map {$_ . '=' . $confopt{$_}} sort keys %confopt) . "\n", 9;
    debug "cmd  options: " . join(' ', 
        map {$_ . '=' . $cmdopt{$_}}  sort keys %cmdopt)  . "\n", 9;
    
    # Merge options, so that config file options override the defaults,
    # and command-line options override everything else
    %Opt = mergeOpts(\%defopt, \%confopt, \%cmdopt);

    # FIXME is this necessary? -- GetOptions won't have allowed it to be otherwise
    ## Pre-validation of single and multiple options
    #foreach my $opt (sort keys %Opt) {
    #    if ($MultiOpt{$opt}) {
    #        # Make sure multiple options really are arrays
    #        foreach my $opt (keys %MultiOpt) {
    #            if ($Opt{$opt} and !(ref($Opt{$opt}) eq 'ARRAY')) {
    #                $Opt{$opt} = [$Opt{$opt}];
    #            }
    #        }
    #    } else {
    #        # Make sure single options ARE single
    #        if (ref($Opt{$opt})) {
    #            printlog "WARNING: Option '$opt' can not have more than one value:\n", 1;
    #            printlog "         the last value '$Opt{$opt}[-1]' will be used\n", 1;
    #            $warningcount += 1;
    #            $Opt{$opt} = $Opt{$opt}[-1];
    #        }
    #    }
    #}
    
    debug "Partially validated final options: " . join(' ', 
        map {$_ . '=' . $Opt{$_}} sort keys %Opt) . "\n", 9;
    
    # If user asked for help or version, or is running test mode,
    # don't do any more validation
    if ($Opt{help} or $Opt{version} or $Opt{test}) {
        return 0;
    }

    # Check for missing options at general level
    foreach my $ropt (@ReqOpt) {
        unless ($Opt{$ropt}) {
            printlog "ERROR: Required option '$ropt' is missing\n", 1;
            $errorcount += 1;
        }
    }
    return $errorcount if $errorcount;

    # Logging (check this first, so that we can log later errors).
    # Note that, once validated, the 'logfile' option is copied to
    # $Opt{validLogfile}, which is what is used by logit().
    # The logfile must be local.
    if (!$Opt{logfile}) {
        # No logfile, so no logging
        $Opt{loglevel} = 0;
    } else {
        $Opt{logfile} = absPath($Opt{logfile});
        # Check that the logfile is a writable file, 
        # or if it does not exist, will be in a writable directory
        if (-f -w $Opt{logfile} or
            -d -w dirname($Opt{logfile})) {
            $Opt{validLogfile} = $Opt{logfile};
        } else {
            printit "ERROR: Logfile '$Opt{logfile}' (option 'logfile') can not be written\n", 1;
            $Opt{loglevel} = 0;
            $errorcount += 1;
            return $errorcount;
        }
    }

    # Add basic info to logfile (which couldn't be done before we had a valid logfile)
    logit "\n" . '-' x 80, 1;
    logit "\n$Script version $Version starting at " . (strftime "%H:%M:%S", localtime) . "\n", 1;
    logit "Command line: $0 @ARGVcopy\n", 3;

    # Lock file (must be local)
    if (!$Opt{lockfile}) {
        printlog "ERROR: Option 'lockfile' is missing, and must be specified\n", 1,1;
        $errorcount += 1;
    } else {
        $Opt{lockfile} = absPath($Opt{lockfile});
        # Check that the lockfile is in a writable directory
        # (if the file already exists, we won't have got this far)
        unless (-d -w dirname($Opt{lockfile})) {
            printlog "ERROR: Lockfile '$Opt{lockfile}' (option 'lockfile') can not be created\n", 1;
            $errorcount += 1;
        }
    }

    # TODO code for checking readable sources should be factorised
    #      because it's used here and per-destination
    #      especially if it is extended to have required options
    #      at source level.
    # Sources, with extra options for each
    # (there may be no sources at general level)
    my $readableSources = 0;
    if ($Opt{source}) {
        my @tempSources = @{$Opt{source}};
        @{$Opt{source}} = ();
        foreach my $src (@tempSources) {
            my $abssrc = safeAbsPath($src->{location});
            if (readableSource($abssrc)) {
                $readableSources += 1; 
                push @{$Opt{source}}, {location=>$abssrc, options=>$src->{options}};
            } else {
                printlog "WARNING: Source '$abssrc' can not be read -- it will be ignored\n", 1;
                $warningcount += 1;
                # (and don't copy it to the final array)
            }
        }
    }

    # Check for required options per destination
    foreach my $dest (@{$Opt{destination}}) {
        foreach my $ropt (@DestReqOpt) {
            #debug "pO: checking $ropt for dest $dest->{location}\n", 1;
            unless ($Opt{$ropt} or ${$dest->{options}}{$ropt}) {
                printlog "ERROR: Required option '$ropt' is missing " .
                    "for destination '$dest->{location}'\n", 1;
                $errorcount += 1;
            }
        }
    }
    return $errorcount if $errorcount;

    # Parse general-level specs
    if ($Opt{spec}) {
        my ($w, $e, $msg, @pspecs) = processSpecs($Opt{spec});
        $errorcount += $e;
        $warningcount += $w;
        printlog "$msg\n" if $msg;
        $Opt{pspecs} = \@pspecs if !$e;
    }

    # Destination directories (with extra options for each)
    my $writableDests = 0;
    my @tempDests = @{$Opt{destination}};
    @{$Opt{destination}} = ();
    foreach my $dest (@tempDests) {
        # Check that destination is writable
        my $absdest = safeAbsPath($dest->{location});
        #debug "destination: absdest=$absdest\n", 9;
        if (writableDest($absdest)) {
            my $options = $dest->{options};
            my $readableSubSources = 0;
            #debug "pO: checking sub sources for $absdest\n", 1;
            #debug "pO: options = " . Dumper($options), 1;
            if ($options->{source}) {
                # This destination has its own source(s) which
                # will override any at the general level
                my @tempSources = @{$options->{source}};
                @{$options->{source}} = ();
                foreach my $src (@tempSources) {
                    my $abssrc = safeAbsPath($src->{location});
                    #debug "pO: checking $abssrc within $absdest\n", 1;
                    if (readableSource($abssrc)) {
                        $readableSubSources += 1; 
                        #debug "pO: good source $abssrc\n", 1;
                        push @{$options->{source}}, {location=>$abssrc, options=>$src->{options}};
                    } else {
                        printlog "WARNING: Source '$abssrc' can not be read -- " . 
                            "it will be ignored\n", 1;
                        $warningcount += 1;
                        # (and don't copy it to the final array)
                    }
                }
            } else {
                # This destination has no sources of its own
                #debug "pO: no sub sources for $absdest\n", 1;
                $readableSubSources = $readableSources;
            }
            if ($readableSubSources) {
                $writableDests += 1;
                # It's a good destination, so parse any spec
                if ($options->{spec}) {
                    my ($w, $e, $msg, @pspecs) = processSpecs($options->{spec});
                    $errorcount += $e;
                    $warningcount += $w;
                    printlog "$msg\n" if $msg;
                    $options->{pspecs} = \@pspecs if !$e;
                }
                # Store the destination back in the main options hash
                push @{$Opt{destination}}, {location=>$absdest, options=>$options};
            } else {
                printlog "WARNING: None of the sources specified for destination '$absdest'" . 
                    " are readable\n", 1;
                printlog "         The whole destination will be ignored\n", 1;
            }
        } else {
            printlog "WARNING: Destination '$absdest' is not available " .
                "as a writable directory -- it will be ignored\n", 1;
            $warningcount += 1;
        }
    }
    if ($writableDests == 0) {
        printlog "ERROR: None of the destinations specified is available\n", 1;
        $errorcount += 1;
    }
    return $errorcount if $errorcount;

    # Cross-check sources and destinations -- they can't all be remote
    # 1. for each destination
    #       if local sources, check them
    #       else check top-level sources
    #          i.e. override top-level temporarily if any
    my $somethingToDo = 0;
    #debug "pO: opt-dest = " . Dumper($Opt{destination}), 1;
    foreach my $dest (@{$Opt{destination}}) {
        #debug "pO: checking $dest->{location}\n", 1;
        my $remoteDest = remote($dest->{location});
        my $source;
        #debug "pO: dest sources = " . Dumper($dest), 1;
        if (exists $dest->{options}->{source}) {
            $source = $dest->{options}->{source};
            #debug "pO: dest sources = " . Dumper($source), 1;
        } else {
            $source = $Opt{source};
            #debug "pO: global sources = " . Dumper($source), 1;
        }
        foreach my $src (@{$source}) {
            #debug "pO: x-checking $dest->{location} -- $src->{location}", 9;
            my $remoteSrc = remote($src->{location});
            if (!remote($src->{location}) or !$remoteDest) {
                $somethingToDo = 1;
                #debug " -- OK\n", 1;
            } else {
                #debug " -- Not\n", 1;
            }
        }
    }
    if (!$somethingToDo) {
        printlog "ERROR: All destination/source combinations are remote/remote -- " . 
            "can not continue\n", 1;
        $errorcount += 1;
    }
    return $errorcount if $errorcount;
    
    # Set up summary structure for results
    foreach my $dest (@{$Opt{destination}}) {
        $Summary{$dest->{location}}{$DestResult} = 'not attempted';
        if ($dest->{options}->{source}) {
            # destination has its own sources -- use them
            foreach my $source (@{$dest->{options}->{source}}) {
                $Summary{$dest->{location}}{$source->{location}} = 'not attempted';
            }
        } else {
            # use general sources
            foreach my $source (@{$Opt{source}}) {
                $Summary{$dest->{location}}{$source->{location}} = 'not attempted';
            }
        }
    }
    #displaySummary();

    # --restart implies --snapshot
    $Opt{snapshot} = 1 if $Opt{restart};

    # Options 'include', 'include-from', 'exclude', 'exclude-from'
    # - these are not checked at all, just passed to rsync

    # spec is checked later

    # Stop here after second phase of check 
    return $errorcount if $errorcount;

    debug "Validated final options: " . join(' ', 
        map {$_ . '=' . $Opt{$_}} sort keys %Opt) . "\n", 9;

    return $errorcount;
}

#---------------------------------------------------------------------------------------------------

sub printableOption ($$) {
    # Return a printable version of an option
    my $opt        = shift;
    my $optionsRef = shift;
    if (ref($optionsRef->{$opt}) eq 'ARRAY') {
        # multiple option -- which happen to be all strings, so add quotes
        return join(', ', map {"'$_'"} @{$optionsRef->{$opt}}); 
    }
    if (grep {$_ eq $opt} @BoolOpt) {
        # boolean options
        return $optionsRef->{$opt} ? 'yes' : 'no';
    }
    if (grep {$_ eq $opt} @StringOpt) {
        # string option, add quotes
        return "'$optionsRef->{$opt}'";
    }
    # else it's numeric, no quotes
    return "$optionsRef->{$opt}";
}

#---------------------------------------------------------------------------------------------------

sub displayContext ($$$);   # pre-declaration required for recursion
sub displayContext ($$$) {
    # Display the sub-options for a single context
    my $context = shift;    # the name of the context option
    my $contRef = shift;    # the context's sub-options
    my $indent  = shift;    # for pretty-printing
    my $text = '';
    #debug "dS: context = $context or " . Dumper($context) . "\n", 9;
    #debug "dS: contRef = $contRef or " . Dumper($contRef) . "\n", 9;
    foreach my $cref (@{$contRef->{$context}}) {
        #debug "dS: cref = " . Dumper($cref) . "\n", 9;
        $text .= sprintf("%*s - '%s'\n", $indent+16, $context, $cref->{location});
        if (keys %{$cref->{options}}) {
            my $text2 = '';    # put the sub-contexts last
            foreach my $subopt (sort keys %{$cref->{options}}) {
                if ($AllowedContext{$context}{$subopt}) {
                    $text2 .= displayContext($subopt, $cref->{options}, $indent+13);
                } else {
                    $text .= sprintf("%*s - %s\n", $indent+16+13, $subopt, 
                        printableOption($subopt, $cref->{options}));
                }
            }
            $text .= $text2;    
        }
    }
    return $text;
}
 
#---------------------------------------------------------------------------------------------------

sub displayOptions () {
    # Display the options nicely formatted
    my $optSummary = "Options summary:\n";
    foreach my $opt (sort keys %Opt) {
        next if $opt eq 'validLogfile'; # for internal use only
        next if $opt eq 'pspecs';       # for internal use only
        my $text = '';
        if ($ValidContext{$opt}) {
            $text = displayContext($opt, \%Opt, 0);
        } else {
            $text = sprintf("%16s - %s\n", $opt, printableOption($opt, \%Opt)); 
        }   
        $optSummary .= $text;
    }
    printlog "$optSummary\n\n", 2,2;
}

#===================================================================================================

# Help

sub showLicence () {
    printit <<EOT;
rsync-based backup snapshot creation and management        
Copyright (C) 2011  Chris Dennis, chris\@starsoftanalysis.co.uk        
                                                                       
This program is free software: you can redistribute it and/or modify  
it under the terms of the GNU General Public License as published by  
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.                              
                                                                  
This program is distributed in the hope that it will be useful,     
but WITHOUT ANY WARRANTY; without even the implied warranty of     
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        
GNU General Public License for more details.                          
                                                                      
You should have received a copy of the GNU General Public License     
along with this program.  If not, see <http://www.gnu.org/licenses/>. 

EOT
}

#---------------------------------------------------------------------------------------------------

sub showHelp () {
    # TODO indicate which are allowed in contexts
    printit <<EOT;

Usage: $Script [option]...

Options can be specified on the command line or in the configuration file.
Main options
--config       file          configuration file name 
--source       file/dir !*d  local or remote file or directory to add to snapshot d
--destination  dir      !*   local or remote snapshot destination
--template     name     ! d  prefix for snapshot directories 
--spec         ...      !    snapshot-keeping specification 
--lockfile     file     !    lock-file 
--logfile      file          file used for logging 
Tuning options
--calendar     yes/no     d  use calendar mode (default: yes)
--safe         yes/no     d  use safe mode (default: yes)
--hbest        0..59      ds favoured time within hour (default: 59) 
--dbest        0..23.9    ds favoured time within day in hours (default: 23.9) 
--mbest        1..31      ds favoured day within month (default: 31) 
--wbest        1..7       ds favoured day within week, 1=Sunday (default: 1) 
--ybest        1.366      ds favoured day within year (default: 366) 
--min-interval 1..        d  minimum number of minutes between snapshots (default: 1) 
--weekstart    1..7       d  first day of week, 1=Sunday (default: 1) 
Helpful options
--help         yes/no        display this help message (default: no)
--version      yes/no        display version number only (default: no)
--verbose      0..3       ds amount of output displayed (default: 1) 
--loglevel     0..3       ds amount of logging information (default: 1) 
--dry-run      yes/no        make no actual changes (default: no) 
Rsync options
--rsync-cmd    file       ds location of the rsync programme (default: rsync) 
--compress     yes/no     ds enable rsync compression for remote transfers 
                              (default: yes) 
--include      pattern   *ds rsync inclusion (see rsync documentation)
--include-from file      *ds rsync inclusions 
--exclude      pattern   *ds rsync exclusion
--exclude-from file      *ds rsync exclusions 
--bwlimit-in   n          ds bandwidth limit for receiving in kbps (default: 0) 
                              (set to 0 for no limit) 
--bwlimit-out  n          ds bandwidth limit for sending in kbps (default: 0) 
                              (set to 0 for no limit) 
--rsync-opts   options    ds extra options to pass to rsync 
                              (default: -aHx --numeric-ids) 
--remote-rsync-cmd file   ds location of the rsync programme on the remote
                               computer (optional, no default) 
Advanced options
--all-failed  keep|delete d  (default: delete) 
--some-failed keep|delete d  (default: keep) 
                             what to do with the snapshot if all or some of the 
                              sources are not copied successfully
                              (values can be abbreviated)
--allow-restart yes/no    ds keep the unfinished snapshot if brandysnap was
                              interrupted (e.g. by ctrl-C or system shutdown)
                              (default: yes) 
--delete       yes/no     d  delete no-longer-required snapshots (default: yes) 
--delete-cp    yes/no     d  delete even in current period (default: yes) 
--expire-old   yes/no     d  delete oldest snapshots when disk is full (default: no)
--ldcount      n          d  number of --link-dest options to create (default: 1) 
--restart      yes/no     ds continue previous snapshot (default: no)
                              (implies --snapshot) 
--snapshot     yes/no     d  create new snapshots (default: yes)
--status       yes/no        print a status report only (default: no)
--strict       yes/no     d  use strict mode (default: no)
Development options
--debug        0..3       ds amount of debugging information (default: 0) 
--stacktrace   yes/no     ds print a stack trace on error (default: no)
--test         n             run test case 'n' 
Options marked with '!' are required -- others have sensible default values.
Options marked with '*' can be specified more than once.
Options marked with 'd' can be specified within a <destination> section.
Options marked with 's' can be specified within a <source> section.

Please see the $Script documentation for full details, including the use of
'contexts' in the configuration file to allow, for example, an exclude
option to apply to one particular source.

EOT
    showLicence();
}

#===================================================================================================
# Filing system stuff

sub remote ($) {
    # Returns 'true' if the path is considered by rsync to be remote
    # (via daemon or just ssh)
    # (See rsync's man page re the significance of ':')
    my $path = shift;
    return 1 if index($path, ':') > -1;
    return 0;
}

#---------------------------------------------------------------------------------------------------

sub remoteDaemon ($) {
    # Returns 'true' if the path is considered by rsync to be remote
    # via the rsync daemon
    # (See rsync's man page re the significance of '::' and 'rsync://')
    my $path = shift;
    return 1 if $path =~ m|^rsync://|;
    return 1 if index($path, '::') > -1;
    return 0;
}

#---------------------------------------------------------------------------------------------------

sub anyDestRemoteDaemon () {
    # Returns 'true' if any of the destinations are using an rsync daemon
    foreach my $dest (@{$Opt{destination}}) {
        return 1 if remoteDaemon($dest);
    }
    return 0;
}

#---------------------------------------------------------------------------------------------------

sub absPath ($) {
    # Convert a file or directory name into an absolute
    # path, with '~' (home directory) expansion.
    my $path = shift;
    # NOTE: This is Unix-specific
    # See http://stackoverflow.com/questions/4404628/abs-path-with-the-home-directory
    # and http://docstore.mik.ua/orelly/perl4/cook/ch07_04.htm
    $path =~ s{^~([^/]*)}{$1?(getpwnam($1))[7]:($ENV{HOME} || $ENV{LOGDIR} || (getpwuid($<))[7])}ex;
    return rel2abs($path);
}

#---------------------------------------------------------------------------------------------------

sub safeAbsPath ($) {
    # A version of absPath that does not change the path at all
    # if it contains a ':', i.e. if it's an rsync-style remote path
    my $path = shift;
    return $path if remote($path);
    return absPath($path);
}

#---------------------------------------------------------------------------------------------------

sub sourceDir ($) { 
    # Remote sources require an enclosing directory on the destination
    # to ensure that there is no overlap.
    # For example, two sources chris@host1:~/home and chris@host2:~/home
    # would both put files into /home on the destination without this.
    #
    # rsync deals with remote sources in the following formats:
    #   [USER@]HOST:SRC                 
    #   [USER@]HOST::SRC                
    #   rsync://[USER@]HOST[:PORT]/SRC  
    # In each case, the enclosing directory will just be HOST
    my $source = shift;
    return '' if !remote($source);
    my $dir;
    if ($source =~ m{^(rsync://|)((?<u>[^@]*)@)?(?<h>[^:/]+)}) {  
        $dir = "$+{h}";
    }
    return $dir;
}

#---------------------------------------------------------------------------------------------------

sub stdArgs ($) {
    # Return the standard arguments for rsync calls
    my $sending = shift;  # True for sending, false for receiving
    my $args = '';
    if ($Opt{'remote-rsync-cmd'}) {
        $args .= "--rsync-path '$Opt{'remote-rsync-cmd'}' ";
    }
    if ($sending) {
        $args .= "--bwlimit=$Opt{'bwlimit-out'} ";
    } else {
        $args .= "--bwlimit=$Opt{'bwlimit-in'} ";
    }
    return $args;
}

#---------------------------------------------------------------------------------------------------

sub updateSnapshotSizes () {
    # Make sure that each snapshot in %S has size information --
    # if not, get the size of the snapshot via rsync.
    # 
    # rsync returns directory listings thusly (even for recent dates):
    #    -rwxr-xr-x         149 2008/06/13 13:56:30 textsmart
    #    drwxr-xr-x        4096 2011/05/07 17:41:48 40dnamer
    # and gives return code 23 if the directory is not found
    #                       255 for wrong password, unknown host etc.
    # Note the lack of nlink information, so we can't calculate 'delete size'.
    # Process in latest-first order so that we can always update the latest one
    # which will be non-zero if we restarted it.
    my $firstOne = 1;
    foreach my $snapshot (rsort keys %S) {
        debug "uSS: initial snapshot size is $S{$snapshot}{size}\n", 9;
        next if !$firstOne and $S{$snapshot}{size} >= 0;
        $firstOne = 0;
        my $totalSize = 0;
        # Get rsync listing into an array
        my @items;
        my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'}, 
            stdArgs(0) . " --recursive '$S{$snapshot}{fullname}/'", 9,9, \@items);
        debug "uSS: snapshot=$snapshot rc=$rc rc2='$rc2'\n", 9;
        if (!$rc) {
            foreach my $item (@items) {
                debug "uSS: item = $item", 9;
                # matching e.g.: 'drwxr-xr-x        4096 2011/05/07 17:41:48 40dnamer'
                if ($item =~ m|^
                    (?<t>.)
                    (?<p>.{9})\s+
                    (?<size>\d+)\s\d{4}/\d{2}/\d{2}\s\d{2}:\d{2}:\d{2}\s
                    (?<name>.*)$
                    |x) {
                    next if $+{name} eq '.';
                    next if $+{name} eq '..';
                    if ($+{t} eq '-' or $+{t} eq 'l' or $+{t} eq 'd') {
                        # file or symbolic link or directory
                        # (we're not following the symbolic link, 
                        # just counting the space of the link itself)
                        # (and we're counting the directory itself, not its contents)
                        debug "uSS: t=$+{t} size=$+{size} name=$+{name}\n", 9;
                        $totalSize += diskSpace($+{size});
                    } else {
                        # (ignore anything other than files and directories)
                        debug "uSS: ignoring non-file-or-dir $item\n", 9;
                    }
                } else {
                    # (ignore any non-matching lines)
                    debug "uSS: ignoring non-matching $item\n", 9;
                }
            }
            $S{$snapshot}{size} = $totalSize;
            debug "uSS: adding size information for $S{$snapshot}{name}, size is $totalSize\n", 9;
        }
    }
}

#---------------------------------------------------------------------------------------------------

sub mkdirRsync ($) { 
    # Use rsync to create a directory
    # (rsync will only create one level of directory normally)
    #my $dest   = shift;
    my $newdir = shift;  # full path of dir to be created
    my @output;
    my @errors;
    my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'},
        stdArgs(1) . " -v --recursive --chmod=ug=rwx,o=rx $EmptyDir/ $newdir", 
        9,9); #, \@output, \@errors);
    debug "mkdirRsync: rc=$rc output='@output' errors='@errors'\n", 1;
    return $rc;
}

#---------------------------------------------------------------------------------------------------

sub readableSource ($) {
    # Use rsync to check if a source is readable
    my $source = shift;
    my @output;
    my @errors;
    my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'},
        stdArgs(0) . "--list-only $source",
        9,9, \@output, \@errors);
    debug "rS: rc=$rc\n", 9;
    return ($rc == 0); 
}

#---------------------------------------------------------------------------------------------------

sub writableDest ($) {
    # Use rsync to check if a destination is writable
    my $dest = shift;
    my $tempdir = 'brandysnap-temp-dir';    # is this ok?
    my @output;
    my @errors;
    #my $rc = mkdirRsync("$dest/$tempdir");
    my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'},
        stdArgs(1) . "--recursive $EmptyDir/ $dest/$tempdir/", 
        9,9, \@output, \@errors);
    debug "wD: create rc=$rc\n", 9;
    return 0 if $rc;  # non-zero - it's not writable, return false
    # temp dir was created, so delete it
    ($rc, $rc2) = systemCall($Opt{'rsync-cmd'},
        stdArgs(1) . "--dirs -f '-!r $tempdir' --delete $EmptyDir/ $dest",
        9,9, \@output, \@errors);
    debug "wD: delete rc=$rc\n", 9;
    return 1;
}

#===================================================================================================

# Snapshot stuff 

#---------------------------------------------------------------------------------------------------

sub deleteSnapshot ($) {
    # Delete a snapshot directory, returning the number of errors encountered.
    # Uses rsync to do the deleting, even for local snapshots, because that
    # avoids problems with permissions.
    my $snapshot = shift; 
    debug "deleteSnapshot: doing $S{$snapshot}{fullname}\n", 3;
    if ($Opt{'dry-run'}) {
        printlog "Dry run: would have deleted '$S{$snapshot}{name}'\n", 1;
        return 0;
    }
    if (!$Opt{delete}) {
        printlog "Not deleting snapshot '$S{$snapshot}{name}' because of option 'delete=no'\n", 1;
        return 0;
    }
    # Use some rsync trickery to delete the snapshot
    # (gleaned from http://lists.samba.org/archive/rsync/2010-October/025723.html)
    # This involves copying an empty directory onto the snapshot, and
    # removing the snapshot directory itself with filter cleverness.
    my @output;
    debug "dS: deleting snapshot the new way\n", 9;
    #my $remPath = $Opt{'remote-rsync-cmd'} ? "--rsync-path '$Opt{'remote-rsync-cmd'}'" : '';
    my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'}, 
        stdArgs(1) . " --dirs -f 'R /$S{$snapshot}{name}/**' -f '-!r /$S{$snapshot}{name}' " .
        "--delete $EmptyDir/ $S{$snapshot}{path}", 
        9,9, \@output); 
    debug "dS: rsync output: \n@output", 9;
    debug "dS: rsync returned $rc, '$rc2'\n", 9;
    # This returns no error if the snapshot didn't exist, which is fine
    if ($rc) {
        printlog "ERROR: failed to delete remote snapshot '$S{$snapshot}{name}' " .
            "from '$S{$snapshot}{path}' (code $rc)", 1,1;
        return 1;
    }
    delete $S{$snapshot};   # delete it from %S too
    return 0;
}

#---------------------------------------------------------------------------------------------------

sub deleteSnapshots (\@\@$) {
    # Delete the snapshots from the given list (latest first)
    my @D         = @{(shift)}; # list of snapshots to delete
    my @cSpecs    = @{(shift)};
    my $deleteNew = shift;
    return if !@D;
    my $ci = 0; # index into @cSpecs
    my $errors = 0;
    printlog "\n", 1;
    debug "dS: list is: " . (join(' ', map {$S{$_}{name}} @D)) . "\n", 1;
    foreach my $di (0..$#D) {
        my $d = $D[$di];
        # Find the cSpec matching this snapshot (just for the log message)
        while ($cSpecs[$ci]->{beg} > $d) { 
            $ci += 1; 
        }; 
        if ($di == 0 and ($deleteNew or !$Opt{delete})) {
            # Don't need to delete the new snapshot because we avoided creating it
            debug "dS: not deleting newest snapshot because it was not created\n", 3;
        } else {
            my $partial = $S{$d}{partial} ? 'partial ' : '';
           printlog "Deleting ${partial}snapshot $S{$d}{name}" . 
                " because there are too many for spec '" . $cSpecs[$ci]->{label} . "'\n", 1;
           $errors += deleteSnapshot($d);
        }
    }
    #printlog "Total of $errors errors while deleting snapshots!\n", 1; 
    return $errors;
}

#---------------------------------------------------------------------------------------------------

sub deleteOldSnapshots (\@;$) {
    # Delete $n snapshots from the list of old ones (oldest ones first)
    my $expirablesR = shift;      # use ref, don't copy array, so that it gets popped
    my $n           = shift // 1;
    my $deleted = 0;
    debug "dOS: n=$n  expirables=@$expirablesR\n";
    while (@$expirablesR and $n > 0) {
        my $e = pop @$expirablesR;
        $n -= 1;
        printlog "Expiring old snapshot $S{$e}{name}\n", 2;
        if (deleteSnapshot($e) == 0) {  
            $deleted += 1;
        } else {
            debug "dOS: failed to delete snapshot $S{$e}{name}\n", 1;
        }
    }
    debug "dOS: deleted $deleted oldest snapshots\n", 3;
    return $deleted;
}

#---------------------------------------------------------------------------------------------------

sub markOrDeleteSnapshot ($$$) {
    # Mark or delete a snapshot, depending on options and errors.
    my $snapshot         = shift; 
    my $sourcesCompleted = shift;
    my $restartable      = shift;

    my $sName = $S{$snapshot}{name};   # for convenience

    my $action; # 'delete' or 'keep'
    if ($restartable and $Opt{'allow-restart'}) {
        # Don't delete if we want to restart
        $action = 'keep';
    } else {
        if ($sourcesCompleted == 0) {
            $action = $Opt{'all-failed'};
            printlog "NOTE: All sources failed, will $action snapshot\n", 1;
        } else {
            $action = $Opt{'some-failed'};
            printlog "NOTE: Some sources failed, will $action snapshot\n", 1;
        }
    }

    if ($Opt{'dry-run'} and ($action eq 'delete')) {
        printlog "Dry run: would have deleted incomplete snapshot '$sName'\n", 1;
        return;
    }

    if ($action eq 'delete') {
        my $rc = deleteSnapshot($snapshot);
        if ($rc == 0) {
            printlog "NOTE: Snapshot deleted\n", 1;
        } else {
            printlog "WARNING: Snapshot could not be deleted (error $rc)\n", 1;
        }
    } else {
        # Mark it as partial
        $S{$snapshot}{partial} = 1;
    }
}

#---------------------------------------------------------------------------------------------------

sub status ($;\@) {
    # Print a status report on existing snapshots for a single destination
    my $dest   = shift;
    my @cSpecs;
    @cSpecs    = @{(shift)} if @_;

#    my $location = $dest->{location};
    my $count  = 0; # complete
    my $xcount = 0; # incomplete
    my $total  = 0;
    my $ci = 0; # index into @cSpecs

    my $plevel = 2; # only output at this level or above
    my $llevel = 2;
    if ($Opt{status}) {
        # User has asked for status, so make sure it's printed and not logged
        $plevel = 0;
        $llevel = 9;
    }

    printlog "\nStatus report for $dest\n", $plevel,$llevel;
    printlog   '------------------' . '-' x length($dest) . "\n", $plevel,$llevel;
    if (!%S) {
        printlog "No snapshots found\n", $plevel,$llevel;
    }
    else {
        my $nameLength = max(length($Opt{template}) + 18, 35);
        printlog sprintf("%-*s   %15s   %s\n", $nameLength, 'Snapshot (most recent first)', 
            'Size', @cSpecs ? 'Spec' : ''), $plevel,$llevel;
        printlog sprintf("%-*s   %15s   %s\n", $nameLength, '-'x$nameLength, 
            '-----------', '-------------', @cSpecs ? '--------' : ''), $plevel,$llevel;
        foreach my $s (rsort keys %S) {
            my $name = $S{$s}{name};
            $name .= ' (p)' if $S{$s}{partial};
            my $size = $S{$s}{size};
            my $label = '';
            if ($S{$s}{partial}) {
                $xcount += 1;
            } else {
                # Find which cSpec applies (complete snapshots only)
                while (@cSpecs and $cSpecs[$ci]->{beg} > $s) { 
                    $ci += 1; 
                }; 
                $label = $cSpecs[$ci]->{label} if @cSpecs;
                # Is this easier?:
                $label .= ' ' . $LevelName{$cSpecs[$ci]->{period}} if @cSpecs;
                $count += 1;
            }
            printlog sprintf("%-*s   %15s   %s\n", $nameLength, $name, 
                bytes($size) || 'empty', $label), $plevel,$llevel;
            $total += $size;
        }
        printlog sprintf("%-*s   %15s\n", $nameLength, '-'x$nameLength, 
            '-----------'), $plevel,$llevel;
        my $incomplete = '';
        $incomplete = "(+$xcount incomplete)" if $xcount;
        printlog sprintf("%8s %s %-16s %3d   %15s\n", 'Total:', ' 'x($nameLength-30), 
            $incomplete, $count, bytes($total)), $plevel,$llevel;
        if ($count > 0) {
            my $average = floor($total/$count);
            printlog sprintf("%-*s   %15s\n", $nameLength, 'Average:', 
                bytes($average)), $plevel,$llevel;
        }
    }
}

#---------------------------------------------------------------------------------------------------

sub displaySummary () {
    # Print out the results summary
    printlog "\nResults Summary\n", 1;
    printlog   "---------------\n", 1;
    foreach my $dest (sort keys %Summary) {
        printlog "Destination $dest:\n";
        foreach my $source (sort keys %{$Summary{$dest}}) {
            #debug "dS: source=$source DestResult=$DestResult\n", 1;
            next if $source eq $DestResult;
            printlog "\tSource $source:\n", 1;
            printlog "\t\t$Summary{$dest}{$source}\n", 1;
        }
        printlog "\t$Summary{$dest}{$DestResult}\n", 1;
    }
}

#===================================================================================================

# Periods
# NB periods end on the beginning of the next one

sub getPeriod ($$) {
    # Return the beginning and end of the period containing
    # the moment specified
    # e.g. if the period is 1 ('d'), return the midnights
    # before and after the moment
    # (If $moment is already the beginning of the period,
    # then stay in that period - don't skip back one)
    # Note: this is for use in calendar mode only
    my $moment  = shift; # as Unix time
    my $periodn = shift;
    my ($beg, $end);
    debug "gP: periodn=$periodn moment=$moment (" . time2stamp($moment) . ")\n", 4;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($moment);
    given ($periodn) {
        when (0) {
            $beg = timelocal(0,0,$hour,$mday,$mon,$year+1900);
            $end = $beg + HOUR;
        } 
        when (1) {
            $beg = timelocal(0,0,0,$mday,$mon,$year+1900);
            $end = $beg + DAY;
        } 
        when (2) {
            # localtime() returns weekday as 0=Sunday, 6=Saturday
            # $opt{weekstart} is 1..7
            $beg = timelocal(0,0,0,$mday,$mon,$year+1900);  # beginning of today
            my $beg1 = $beg; # for debugging only
            $beg -= (($wday- ($Opt{weekstart}-1) + 7) % 7) * DAY;   # adjust for weekday
            $end = $beg + DAY*7;
            debug "gP: mday=$mday mon=$mon year=$year wday=$wday ws=$Opt{weekstart} beg1=$beg1/" . 
                time2stamp($beg1) . " beg=$beg/" . time2stamp($beg) . 
                " end=$end/" . time2stamp($end) ."\n", 9;
        } 
        when (3) {
            $beg = timelocal(0,0,0,1,$mon,$year+1900);
            $end = date2time(DateCalc(time2date($beg), '0:1:0:0:0:0:0')); # +1month
        } 
        when (4) {
            $beg = timelocal(0,0,0,1,0,$year+1900);
            $end = timelocal(0,0,0,1,0,$year+1901);
        } 
        default {
            die "Invalid period number '$periodn' passed to getPeriod";
        }
    }
    return ($beg, $end);
}

#---------------------------------------------------------------------------------------------------

sub prevPeriod ($$) {
    # Given the beginning of one period, 
    # and the period number of the previous one, 
    # return the beginning and end of the previous one.
    # Note: this does not 'align' the period to whole weeks or months etc.,
    # e.g. month before 20110622-234400 is 20110522-234400--20110622-234400
    # This copes with DST and leap years (as far as I can tell).
    my $beg     = shift;
    my $periodn = shift;
    #my $end = $beg;
    my $newbeg;
    if ($periodn == $Level{h}) {
        # When going back an hour, just subtract the relevant number 
        # of seconds.  (If we use DateCalc, it does clever stuff with
        # the change to or from daylight savings, which we don't want.)
        $newbeg = $beg - HOUR;
    } else {
        # For all other periods, use DateCalc, with mode set to 1
        # for 'approximate' mode, e.g. a day is a whole day, and
        # not always 24 hours (if DST starts or ends).
        $newbeg = date2time(DateCalc(time2date($beg), $PrevP[$periodn], 1));
    }
    debug "pP: $LevelName[$periodn] before " . time2stamp($beg) . " starts at " . 
        time2stamp($newbeg) . "\n", 9;
    return ($newbeg, $beg);
}

#---------------------------------------------------------------------------------------------------

sub fullPeriod ($$$) {
    # Returns true if the beg,end pair given are a full period
    # Note: this does not 'align' the period to whole weeks or months etc.,
    # e.g. 20110522-234400--20110622-234400 is a full month
    my $beg     = shift;
    my $end     = shift;
    my $periodn = shift;
    my ($beg2, $end2) = prevPeriod($end, $periodn);
    return ($beg == $beg2 && $end == $end2) ? 1 : 0;
}

#---------------------------------------------------------------------------------------------------

sub fmtRange ($$) {
    # Format a timestamp range to make it readable
    my $beg = shift;
    my $end = shift;
    my $range = $end - $beg;
    my $begStamp = time2stamp($beg);
    debug "fR: range is " . pair2range($beg, $end) . "\n", 9;
    if ($range == HOUR) {
        return "hour from " . $begStamp;
    } elsif ($range == DAY) {
        return "day from " . $begStamp;
    } elsif ($range == WEEK) {
        return "week from " . $begStamp;
    }
    # DST/leap years: won't get the whole periods we expect,
    # but that's just cosmetic.  TODO check for error from DateCalc
    my $delta = DateCalc(time2date($beg), time2date($end), 1); # (1 = approx mode)
    debug "fR: delta is $delta\n", 9;
    if ($delta eq '+0:1:+0:0:0:0:0') {
        return "month from " . $begStamp;
    } elsif ($delta eq '+1:0:+0:0:0:0:0') {
        return "year from " . $begStamp;
    } else {
        return "period " . time2stamp($beg) . " to " . time2stamp($end);
    }
    # TODO expand this for multiple periods? e.g. if $delta =~ /\+(\d+):0:\+0:0:0:0:0/ -> $1 years
}

#---------------------------------------------------------------------------------------------------

sub countPeriods ($$$) {
    # Return the number of periods between two dates
    # (which may not be an integer)
    my $beg     = shift;
    my $end     = shift;
    my $periodn = shift;
    # TODO  Won't return the expected integer result for DST/Leap year cases
    my $delta = DateCalc(time2date($beg), time2date($end));
    my $count = Delta_Format($delta, "%$DMperiod[$periodn]ys");
    return sprintf(($count == floor($count)) ? "%d" : "%.1f", $count);  # 1dp if not an integer
}

#===================================================================================================

sub writeMetadata ($) {
    # Store information from %S in the metadata file via rsync using JSON 
    my $dest = shift;

    return if !%S;

    my $mdfile = "$Opt{template}.status";

    # Create subset of %S to store
    my @S;
    foreach my $s (sort keys %S) {
        push @S, {snapshot => time2stamp($s), partial => $S{$s}{partial}, size => $S{$s}{size}};
    }
    my $json = to_json(\@S, {pretty => 1});
    debug "wM: json is '$json'\n", 9;

    # Write to a temporary local file
    my ($tempfh, $tempfilename) = tempfile(UNLINK => 1);
    my $succeeded = 0;
    print $tempfh "# Status of brandysnap backups for '$Opt{template}' on '$dest' as at " . 
        time2stamp(time()) . "\n";
    print $tempfh "# Do not edit or delete this file\n";
    print $tempfh $json;
    close $tempfh;

    # Send the file via rsync
    my @output;
    #my $remPath = $Opt{'remote-rsync-cmd'} ? "--rsync-path '$Opt{'remote-rsync-cmd'}'" : '';
    my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'}, 
        stdArgs(1) . " --chmod=ug=rw,o=r '$tempfilename' '$dest/$mdfile'", 
        9,9, \@output);    
    debug "wM: rc=$rc output: '@output'\n", 9;
    $succeeded = 1 if !$rc;

    if (!$succeeded) {
        printlog "WARNING: Unable to create metadata file '$mdfile'\n";
        printlog "         Metadata is:\n", 1;
        printlog "$json\n\n", 1;
    }
}

#---------------------------------------------------------------------------------------------------

sub readMetadata ($) {
    # Read the metadata into an array
    my $dest = shift; 

    my $mdArrayRef = (); 
    my $mdfile = "$Opt{template}.status"; 

    # Get the metadata file via rsync to a temporary file
    # (note the hacky way we override the --dry-run option)
    my $tempdir = tempdir(CLEANUP => 1);  
    debug "rM: tempdir is $tempdir\n", 9;
    my @output; 
    my $dryrun = $Opt{'dry-run'};
    $Opt{'dry-run'} = 0;
    my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'}, 
        stdArgs(0) . " '$dest/$mdfile' '$tempdir/'", 
        9,9, \@output);
    $Opt{'dry-run'} = $dryrun;
    debug "rM: rc=$rc output: '@output'\n", 9;
    return $mdArrayRef if $rc;

    # Read the metadata file
    if (open MDF, '<', "$tempdir/$mdfile") { 
        my $json = ''; 
        while (<MDF>) { 
            $json .= $_; 
        } 
        close MDF;
        $mdArrayRef = from_json($json, {relaxed => 1});
        foreach my $s (@$mdArrayRef) { 
            # Check that all values are there
            $s->{partial} =  0 if !defined $s->{partial};
            $s->{size}    = -1 if !defined $s->{size};
            debug "rM: $s->{snapshot} / $s->{partial} / $s->{size}\n", 1; 
        } 
    } else { 
        debug "rM: Unable to read temporary metadata file '$tempdir/$mdfile'\n", 1;
    }
    return $mdArrayRef; 
}

#===================================================================================================

sub getSnapshotList ($) {
    # Read in the existing snapshots, storing their details in global hash %S.
    # Uses rsync in case the destination is remote.
    my $dest = shift;
    my $template = $Opt{template};  
    debug "gSL: dest=$dest template=$Opt{template}\n", 1;
    # Start with an empty list
    %S = ();
    my @listing;
    #my $remPath = '';
    #if (remote($dest) and $Opt{'remote-rsync-cmd'}) {
    #   $remPath = "--rsync-path '$Opt{'remote-rsync-cmd'}'";
    #}
    my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'}, 
        stdArgs(0) . " --list-only '$dest/'", 9,9, \@listing);    
    debug "gsL: rc=$rc listing: @listing n=" . scalar @listing ."\n", 9;
    return if $rc;
    my $remote = remote($dest);
    my $daemon = remoteDaemon($dest);
    foreach (@listing) {
        chomp;
        # matching e.g. 'drwxr-xr-x        4096 2011/08/09 23:01:29 library-20110809-165521'
        if (/\d\d:\d\d:\d\d\s+ 
            (?<name>($template)-
            (?<Y>\d{4})(?<M>\d{2})(?<D>\d{2})-
            (?<h>\d{2})(?<m>\d{2})(?<s>\d{2}))
            (?<ps>-$PartialSuffix)?$/x) {
            # Skip over any template with an invalid date (should not happen)
            next if $+{M} < 1;
            next if $+{M} > 12;
            next if $+{D} < 1;
            next if $+{D} > daysInYearMonth($+{Y}, $+{M}-1);
            next if $+{h} > 23;
            next if $+{m} > 59;
            next if $+{s} > 60;
            # Add information about the snapshot to the global hash
            my $ps = $+{ps} // '';
            $S{stamp2time($_)} = {
                name     => "$+{name}$ps",
                path     => $dest,
                fullname => "$dest/$+{name}$ps",
                partial  => $+{ps} ? 1 : 0, # obsolete -- suffixes will no longer be used
                size     => -1,             # no size information yet
                remote   => $remote,
                daemon   => $daemon,
            };
        } else {
            debug "gSL: unmatched: $_\n", 9;
        }
    }
    # Get the metadata
    my $mdArrayRef = readMetadata($dest);
    if ($mdArrayRef) {
        debug "gSL: mdArrayRef=$mdArrayRef\n", 9;
        # And combine the two:
        # - warn about entries in metadata for which there is no snapshot
        # - add any partial and size information for the existing snapshots
        foreach my $md (@$mdArrayRef) {
            debug "gSL: matching md: $md->{snapshot} / $md->{partial} / $md->{size}\n", 1;
            my $s = stamp2time($md->{snapshot});
            if ($S{$s}) {
                debug "gSL: updating metadata for snapshot $md->{snapshot}\n", 1;
                $S{$s}{partial} |= $md->{partial};  # It's partial if either source says it is
                $S{$s}{size}     = $md->{size};
            } else {
                printlog "WARNING: snapshot '$template-$md->{snapshot}' is missing\n", 1;
            }
        }
    }
    # Set empty snapshots as partial (this shouldn't happen, but 
    # we might as well encourage the system to prune empty snapshots)
    foreach my $s (keys %S) {
        $S{$s}{partial} = 1 if $S{$s} == 0;
    }
}

#---------------------------------------------------------------------------------------------------

sub visualise ($$$$$$@) {
    # Draw a pretty picture of the actual and ideal snapshots
    # given pairs of (label, array)
    # Doesn't distinguish good and bad snapshots -- the caller
    # should visualise bad snapshots separately.
    my $beg        = shift;
    my $end        = shift;
    my $showPeriod = shift;
    my $plevel     = shift;
    my $llevel     = shift;
    my $best       = shift; 
    # If plevel/llevel mean there will be no output, just return
    return if $plevel > $Opt{verbose} and $llevel > $Opt{loglevel};
    my $labelwidth = 8;
    #my ($columns, $rows) = Term::Size::chars *STDOUT{IO};
    #$columns = max($columns, 132); # minimum, and also if there's no tty
    my $columns = 80;
    my $size = $columns - $labelwidth - 3;  # - 18; # -18 for log timestamp
    my $scale = ceil(($end - $beg) / $size);    
    debug "visualise: beg=$beg end=$end (" . fmtRange($beg,$end) . ") size=$size scale=$scale\n", 9;

    while (@_ > 1) {
        my $label = pack("A$labelwidth", shift);    # force label to specified width
        my @a     = @{(shift)};
        debug "vis: label=$label\n", 9;
        my @points = (0) x ($size+1);
        A: foreach my $a (@a) {
            my $pos = floor(($a - $beg) / $scale);
            if ($pos < 0 or $pos > $size) {
                debug "vis: out of range: $pos should be >= 0 and <= $size, a=$a (" . 
                    time2stamp($a) . ")\n", 1;
                next A;
            }   
            if ($label eq 'Ideal' and !$points[$pos] and $best == $a) {
                $points[$pos] = 'B';  # this is a nasty hack! what if it later does 'B'+1 ?
            }
            else {
                $points[$pos] += 1;
            }
        }
        my $period = '';
        $period = fmtRange($beg, $end) if $showPeriod;
        printlog "$label|" . join('', 
            map {
                !defined($_) ? '.' : 
                ($_ eq 'B')  ? 'B' :            # 'best' if label is 'Ideal' 
                ($_ < 1)     ? '.' : 
                ($_ > 9)     ? '*' : 
                               $_
            } 
            @points) . "| $period\n", $plevel,$llevel;
    }
}

#---------------------------------------------------------------------------------------------------

sub arrayDiff (\@\@) {
    # Return elements of X that aren't in Y.
    # This doesn't work if there are duplicates in either array!
    # (That's OK, 'cos we're only using it for arrays of snapshot
    # timestamps which are required to be unique.)
    my @X = @{(shift)};
    my @Y = @{(shift)};
    my %Y = map {$_=>1} @Y; # hash version of @Y
    return grep(!defined $Y{$_}, @X);
}

#---------------------------------------------------------------------------------------------------

sub snapshotBefore ($) {
    # Return the snapshot before the one given (if any)
    # For good snapshots, only consider the previous good one.
    # For bad snapshots, any previous one will do.
    my $this = shift;   # the snapshot to compare 
    foreach my $s (rsort keys %S) {
        next if !$S{$this}{partial} and $S{$s}{partial}; # skip the bad ones if this one is good
        return $s if $s < $this;
    }
    return 0;   # None found, return 0 which will test as false
}

#---------------------------------------------------------------------------------------------------

sub snapshotAfter ($) {
    # Return the good snapshot after the one given (if any)
    my $this = shift;   # the snapshot to compare 
    my $prevs = 0; # If none found, return 0 which will test as false
    foreach my $s (rsort keys %S) {
        next if !$S{$this}{partial} and $S{$s}{partial}; # skip the bad ones if this one is good
        return $prevs if $s <= $this;
        $prevs = $s;
    }
    return $S{$prevs}{partial} ? 0 : $prevs; # all snapshots are after the date given, 
                                             # so return the first one (if it's good)
}

#---------------------------------------------------------------------------------------------------

sub snapshotsInPeriod (\@$$;$) {
    # Given a list of snapshot dates in descending order,
    # and a period (beginning and end dates),
    # return the number of snapshots in the period
    # or an array of said snapshots, depending on the last parameter.
    # (Can't use wantarray, because this often gets
    # called in list context even when just the count is needed)
    my @S           = @{(shift)};
    my $beg         = shift;
    my $end         = shift;
    my $returnArray = shift // 0;
    my $count = 0;
    my @SIP;
    foreach my $s (@S) {
        last if $s < $beg;
        if ($s < $end) {
            $count += 1;
            push @SIP, $s;
        }
    }
    debug "snapshotsInPeriod $beg..$end " . time2stamp($beg) . '..' . time2stamp($end) . 
        " = $count\n", 9;
    return @SIP if $returnArray;
    return $count;
}

#---------------------------------------------------------------------------------------------------

sub nextOldestSnapshot ($\@) {
    # Return the first snapshot before the given date
    # or 'undef' if there is no such snapshot
    my $time = shift;
    my @S    = @{(shift)};
    my $nextOldest;
    foreach my $s (@S) {
        debug "nOS(" . time2stamp($time) . ") returning " . time2stamp($s) . "\n", 3 if $s < $time;
        return $s if $s < $time;
    }
        debug "nOS(" . time2stamp($time) . ") returning undef\n", 3;
    return undef;
}

#---------------------------------------------------------------------------------------------------

sub getMatchingSnapshots ($$$$\@) {
    # Get a list of snapshots in the given period that
    # are the best match for the ideal/expected snapshots
    my $beg     = shift;         # beginning of period 
    my $end     = shift;         # end of period
    my $best    = shift;         # seconds from $beg to preferred snapshot time
    my $freqmax = shift;         # maximum number of snapshots in period
    my @S       = @{(shift)};    # array of timestamps of existing snapshots (just those in range)
                                 # in descending order

    my $range  = $end - $beg;   # the length of the period in seconds
    debug "getMatchingSnapshots: beg=$beg end=$end range=$range best=$best freqmax=$freqmax\n", 3;
    debug " (first S = $S[0]    last S = $S[-1]  -- in descending order)\n", 9 if @S;

    # Special case: if freqmax is zero, delete all snapshots (i.e. keep none)
    if ($freqmax == 0) {
        debug "gMS: freqmax==0 -- deleting all\n", 4;
        return ();
    }

    # Special case: if freqmax is -1, keep all snapshots
    if ($freqmax == -1) {
        debug "gMS: freqmax==-1 -- keeping all\n", 4;
        return @S;
    }

    # Calculate closeness factor for each snapshot
    # from formula closeness=r/(p+n)
    # where p = distance to previous snapshot (or r if none)
    #       n = distance to next snapshot (or n if none)
    #       r = range (see above)
    # possible tuning:
    #      - set p or n to less than r if being on the end gets too much weight
    #       = we're currently trying r/2
    #       - could even make it an option
    my @closeness;
    my $endfactor1 = 0.5;
    my $endfactor2 = 0.5; 
    # Note that only good snapshots are considered when calculating closeness
    # -- this is handled by snapshotBefore/After
    my $totalC = 0;
    for my $s (0..$#S) {
        # Get distance to previous/next good snapshot 
        # (may be beyond current period)
        my $previous = snapshotBefore($S[$s]);
        my $next     = snapshotAfter($S[$s]);
        # If previous/next don't exist, calculate a closeness value
        # that is scaled to $range with a tuning factor
        my $p = $previous ? abs($S[$s] - $previous) : $range * $endfactor1;
        my $n = $next     ? abs($next  - $S[$s])    : $range * $endfactor2;
        # Check if they're infinitely close! 
        # (shouldn't happen because snapshots can't share a date)
        my $closeness = ($p+$n == 0) ? 9999999999 : $range/($p+$n);
        debug "gMS: this=" . time2stamp($S[$s]) . " previous=" . time2stamp($previous) . 
            " next=" . time2stamp($next) . " p=$p n=$n c=$closeness\n", 9;
        push @closeness, $closeness;
        $totalC += $closeness;
    }
    my $averageC = $totalC / scalar @S;
    
    my $bestTime = $beg + $best;    # best as Unix time, not offset from $beg

    my $oldBeg = $beg;
    my $oldEnd = $end;

    # 'Shelf-bracket factor' is the size of the extra space
    # between the bracket and the end of the shelf, as
    # a proportion of the distance between brackets:
    #            
    # Shelf:     ====================================
    # Brackets:       \/          \/          \/
    #            <-f1-><----i----->            <-f2->
    # 
    # In terms of snapshots, the shelf represents the range
    # under consideration, and the ideal snapshot times are the brackets.
    #
    # Set each factor to 1/2, assuming the other half will appear
    # in the adjoining period:
    my $sbFactor1 = 0.5;
    my $sbFactor2 = 0.5;

    # Adust beg...end range around a 'close' group of snapshots
    # (i.e. ones that are not near snapshots in previous and next periods)
    # for better spacing of the 'ideals'.
    # A sequence of snapshots is considered a 'group' if either
    # the first or last has a closeness less than 50% (tunable)
    # of the average closesness.
    my $groupFactor = 0.50;     # tuning 
    # (don't forget that @closeness is in descending order by time)
    if ($closeness[0] < ($averageC * $groupFactor)) {
        # Adjust end of range 
        # (+1 to make sure last snapshot is IN the range)
        $end = $S[0];
        debug "gMS: adjusting end of range for closeness, now $end (" . time2stamp($end) . ")\n", 4;
        $sbFactor2 = 0;
    }
    if ($closeness[-1] < ($averageC * $groupFactor)) {
        # Adjust beginning of range
        $beg = $S[-1];
        debug "gMS: adjusting beg of range for closeness, now $beg (" . time2stamp($beg) . ")\n", 4;
        $sbFactor1 = 0;
    }

    # Further adjustment to weighting of incomplete snapshots
    # as a 'distance' in time -- makes incomplete snapshots always a bad match
    # Factor may need tuning -- currently it's arbitrarily large at 10000 to make 
    # sure that bad snapshots are deleted first.
    my @badoffset;
    foreach my $s (@S) {
        push @badoffset, ($S{$s}{partial} ? $range * 10000 : 0);
    }
    debug "gMS: badoffsets: @badoffset\n", 3;

    # Make sure best isn't out of range
    # (this is needed sometimes even if the closeness adjustment above isn't used)
    # (the -1 is to make sure $best is IN the range)
    $bestTime = $beg   if $bestTime <  $beg;
    $bestTime = $end-1 if $bestTime >= $end;
    debug "gMS: bestTime is now $bestTime (" . time2stamp($bestTime) . ")\n", 4;

    # Recalculate $best as offset into beg..end range
    $best = $bestTime - $beg;
    # and recalculate $range accordingly
    $range = $end - $beg;   # the length of the period in seconds
    debug "gMS: best is now $best, range is now $range, best/range is now ".$best/$range."\n", 4;

    # Initially space out the ideal snapshots evenly
    # (these values are used if there is no 'best' time)
    my @I;
    for my $i (0..$freqmax-1) {
        $I[$i] = $beg + ($i+0.5) * $range/$freqmax;
    }

    # Then take into account the h/d/w/m/ybest options
    @I = ();
    # put the best one in first
    $I[0] = $bestTime;
    debug "gMS: best=$I[0]\n", 8;
    if ($freqmax > 1) {  # more than one ideal to place, not just the best one
        my $strategy = 1;
        #my $offset = $best % $interval;
        #debug "interval = $interval, best=$best, offset=$offset\n";
        if ($strategy == 1) {
            # better: calculate how many should go before and after,
            # then spread them out.
            #my $bbyr = $best / $range;
            my $befores = floor(($best              / $range) * $freqmax);
            my $afters  = floor((($range-1 - $best) / $range) * $freqmax);
            # (the '-1' above is to avoid fence-post errors:
            # we don't want to consider the final second of the period)
            debug "gMS: strategy 1:  befores=$befores  afters=$afters\n", 9;
            if ($befores > 0) {
                # befores
                my $interval = floor($best / ($befores + $sbFactor1));
                debug "gMS: s1: befores: interval=$interval\n";
                my $ptr = $beg + $best;
                for my $i (1..$befores) {
                    $ptr -= $interval;
                    debug "gMS: B - i=$i ideal = $ptr " . time2stamp($ptr) . "\n";                                         
                    unshift @I, $ptr;
                }
            }
            if ($afters > 0) {
                # afters
                my $interval = floor(($range-$best) / ($afters + $sbFactor2));
                debug "gMS: s1: afters : interval=$interval\n";
                my $ptr = $beg + $best;
                for my $i (1..$afters) {
                    $ptr += $interval;
                    debug "gMS: A - i=$i ideal = $ptr " . time2stamp($ptr) . "\n";
                    push @I, $ptr;
                }
            }
            # - that calc works, but is it really better??  
        } else {
            # FIXME make this an option, or (probably) delete it
            # Strategy 2
            my $interval = floor($range / $freqmax);   # time between snapshots to nearest second
            # add more before the best one
            my $ptr = $beg + $best - $interval;
            while ($ptr >= $beg and @I < $freqmax) {   # 2nd test to avoid fence-post error
                unshift @I, $ptr;
                debug "gMS: before best=$I[0]\n", 8;
                $ptr -= $interval;
            }
            # add more after the best one
            $ptr = $beg + $best + $interval;
            while ($ptr < $end and @I < $freqmax) {
                push @I, $ptr;
                debug "gMS: after best=$I[0]\n", 8;
                $ptr += $interval;
            }
        }
    }

    debug "gMS: ideals: @I total: " . @I . "\n", 9;

    # Generate all combinations of the ideal number of snapshots
    # out of the existing snapshots, then calculate a score for each combination
    # and choose the one with the best score
    # FIXME -- maybe we should leave first and last fixed if they're already aligned
    my @combs = combinations(scalar @I, 0..$#S); 
    my $minct = MAXTIME;    # smallest combination total so far
    my $mincti = 0;         # index of smallest combination so far 
    #my $ci = 0; 
    #foreach my $comb (@combs) {
    for my $ci (0..$#combs) {
        my @comb = @{$combs[$ci]};
        my $combtotal = 0;
        # Note: ideals are already in ascending order, need to sort the comb
        # (in descending order of indexes, i.e. ascending order of dates)
        @comb = sort {$b <=> $a} @comb;
        foreach my $i (0..$#I) { # for each ideal:
            my $c = $comb[$i];  # choose the corresponding existing snapshot
            # The score for each existing snapshot is:
            #    (distance to ideal * closeness) + offset for being bad
            my $score = abs($I[$i] - $S[$c]) * $closeness[$c] + $badoffset[$c];
            debug "gMS: i=$i comb[i]=$c I[i]=$I[$i] S[c]=$S[$c] I-S=". abs($I[$i]-$S[$c]) .
                " clo=$closeness[$c] bo=$badoffset[$c] score=$score\n", 9;
            $combtotal += $score;
        }
        if ($combtotal < $minct) {
            $minct = $combtotal;
            $mincti = $ci;
        }
        #$ci += 1;
    }
    debug "gMS: " . @combs . " combinations tested\n", 5;
    debug "gMS: best combination, with total $minct, is " . 
        join(' ', sort {$b <=> $a} @{$combs[$mincti]}) . "\n", 5;
    my @bestMatches = sort(map {$S[$_]} @{$combs[$mincti]});    # convert indexes back to snapshots 
    debug "gMS: best matches: @bestMatches total: " . @bestMatches . "\n", 5;
    debug "gMS: closeness (old to new): " . 
        join(' ', (map {sprintf("%.2f", $_)} reverse @closeness)) . 
        ", average: $averageC\n", 5;
    visualise($oldBeg, $oldEnd, 1, 1,1, $bestTime, 
        'Snap'  => \@S, 
        'Ideal' => \@I, 
        'Match' => \@bestMatches) if $Opt{debug} >= 3;

    return @bestMatches;
}   # getMatchingSnapshots;

#---------------------------------------------------------------------------------------------------

sub bestOffset {
    # Returns the 'best' option for a period as the offset in seconds from 
    # the beginning of the period.
    my $period = shift;
    my $time   = shift; # a time within the period
    my $best;

    if ($period eq 'h') {
        # Best is a minute from 0-59
        $best = $Opt{hbest} * MINUTE;
    } elsif ($period eq 'd' and $Opt{dbest}) {
        # Best is specified as an hour from 0-23.99
        # so calculate the fraction of day
        $best = $Opt{dbest} * HOUR;
    } elsif ($period eq 'w') {
        # Best is a number from 1 to 7 indicating
        # the day.  Choose the middle of the day (is that OK?)
        # TODO allow e.g. 'Friday 5pm' as supplied by Date::Manip
        $best = ($Opt{wbest}-0.5) * DAY;
    } elsif ($period eq 'm') {
        # Best is the day of the month -- assume noon
        my $mbest = min($Opt{mbest}, daysInMonth($time));
        $best = ($mbest-0.5) * DAY;
    } elsif ($period eq 'y') {
        # Best is the day of the year -- assume noon
        my $ybest = min($Opt{ybest}, daysInYear($time));
        $best = ($ybest-0.5) * DAY;
    } else {
        # Shouldn't happen, but return a usable answer anyway
        $best = 1;  
    }
    return $best;
}

#---------------------------------------------------------------------------------------------------

sub getDeleteList (\@;$) {
    # Given a list S of existing snapshots as a list of timestamps,
    # return a list of the ones to be deleted
    # by checking against the list of cSpecs.
    # Plan 
    # - get separate lists of good and incomplete S's
    # - for each cSpec
    # -   if there are enough good ones, delete all the bad ones
    # -   if more than enough (good+bad), choose as before, but with extra weighting on the bad
    my @cSpecs = @{(shift)};
    my $plevel = shift // 3;    # optional to override print level

    # Separate the complete ('good') from the incomplete ('bad') snapshots
    my @Sgood;
    my @Sbad;
    foreach my $s (rsort keys %S) {
        if ($S{$s}{partial}) {
            push @Sbad, $s;
        } else {
            push @Sgood, $s;
        }
    }

    my @allMatches;
    my @D;
    my $firstbeg = MAXTIME; 
    my $lastend = 0;

    debug "\ngetDeleteList: Sgood: " . dumpSnapshots(@Sgood) . "\n", 3;
    debug   "               Sbad:  " . dumpSnapshots(@Sbad)  . "\n", 3;
    debug   "               no of cspecs = " . @cSpecs . "\n", 3;

    foreach my $c (@cSpecs) {

        my $beg = $c->{beg};
        my $end = $c->{end};
        debug "\ngDL processing cSpec $c->{label} freq=" 
            . fmtFreq($c->{freqmin},$c->{freqmax}) . " range " 
            . pair2range($beg, $end) . "\n", 3;

        # Find candidate snapshots in that period
        my @Cgood = snapshotsInPeriod(@Sgood, $beg, $end, 1);
        my @Cbad  = snapshotsInPeriod(@Sbad , $beg, $end, 1);
        debug "gDL: good candidates: " . dumpSnapshots(@Cgood) . " total: " . @Cgood . "\n", 3;
        debug "gDL: bad  candidates: " . dumpSnapshots(@Cbad) . " total: " . @Cbad . "\n", 3;
        if (@Cgood or @Cbad) {
            # there are snapsnots in this period, so adjust the overall range
            $firstbeg = $beg if $beg < $firstbeg;
            $lastend  = $end if $end > $lastend;
        }
        if (!@Cgood and !@Cbad) {
            # no candidates found
            debug "gDL: no candidates found to match $c->{label} for period " . 
                time2stamp($beg) . '...' . time2stamp($end) . "\n", 3;
        } elsif (@Cgood + @Cbad <= $c->{freqmax}) {
            debug "gDL: no more candidates found than required for $c->{label}\n", 3;
            push @allMatches, rsort (@Cgood, @Cbad);
        } else {
            if (@Cgood >= $c->{freqmax}) {
                # enough good candidates: start by deleting all the bad ones
                debug "gDL: enough good -- deleting all bad\n", 3;
                push @D, @Cbad;
                @Cbad = ();
            }
            if (@Cgood + @Cbad > $c->{freqmax}) {
                # Still more than enough candidates (including bad ones)
                # - choose the ones to delete (because ones will get chosen first)
                my $extras = $c->{freqmax} - (@Cgood + @Cbad);
                my @Call = rsort(@Cgood, @Cbad);
                my @I = getMatchingSnapshots($beg, $end, $c->{best}, $c->{freqmax}, @Call); 
                push @allMatches, @I;
                push @D, arrayDiff(@Call, @I);
                debug "gDL: storing keepers and deleters:\n\@Call:   " . 
                    dumpSnapshots(@Call) . "\n\@I:   " . 
                    dumpSnapshots(@I) . "\ndiff: " . dumpSnapshots(arrayDiff(@Call, @I)) . "\n", 3;
                debug "gDL: \@D is now: " . dumpSnapshots2(@D) . "\n", 3;
            } else {
                debug "gDL:  no more than required after deleting bad ones\n", 3;
            }
        }

    } # foreach spec

    # sort @D cos may not have been added in ordegit search historyr
    @D = rsort @D;

    # Summarise keepers and deleters over whole period
    printlog "\nSummary of all existing snapshots: " . time2stamp($firstbeg) . ' - ' . 
        time2stamp($lastend) . "\n", $plevel; 
    printlog "--------------------------------------------------------------------\n", $plevel;
    printlog((@Sgood+@Sbad) . ' snapshots, ' . @allMatches . ' to be kept, ' . @D . 
            " to be deleted\n", $plevel);
    visualise($firstbeg, $lastend, 0, $plevel,$plevel, 0,   
        'SnapG' => \@Sgood, 
        'SnapB' => \@Sbad, 
        'Keep'  => \@allMatches, 
        'Del'   => \@D);

    return @D;  # list of timestamps of snapshots to delete
}

#===================================================================================================

sub findGoodPeriods ($$$\@) {
    # Starting with period ($beg, $end) and working backwards in time, 
    # check for $count periods each with at least $freqmin snapshots.
    # Return the [beginning, end, good?, snapshots-in-period, period-count] for each period
    # (including the gaps between the 'good' periods).
    # This version keeps periods aligned to calendar days/weeks/months etc.
    # The ($beg, $end) of the last one is then where we're up to.
    my $beg  = shift;
    my $end  = shift;
    my $spec = shift;
    my @S    = @{(shift)};  # just 'good' ones

    my $gpCount = 0;
    my @good;
    #if (!@S) {    - no longer works, because freqmin can be 0!!    FIXME reinstate?
    #    # No snapshots, so no good periods
    #    debug "fGP: \@S is empty!\n", 3;
    #    return ($gpCount, @good);
    #}
    my $oldestSnapshot = $S[-1] // MAXTIME;
    debug "fGP: range=" . pair2range($beg, $end) . 
        " freqmin=$spec->{freqmin} periodn=$spec->{periodn} " . 
        "count=$spec->{count} oldestS=" . time2stamp($oldestSnapshot) . "\n", 3;

    # Special case:
    # if this is an 'unlimited' spec, then its count will be (effectively) infinite
    # -- we need to keep filling periods until there are no more snapshots
    # -- if any periods have less than freqmin, then relax, just treat them as full
    # This is all dealt with simply by the condition count==UNLIMITED below.

    my $lastPeriodGood = 1;
    while (($end     > $oldestSnapshot) and
           ($gpCount < $spec->{count} )     )  {
        my $sip = snapshotsInPeriod(@S, $beg, $end);
        if (($spec->{count} == UNLIMITED) or 
            ($sip >= $spec->{freqmin}   )    ) {
            push @good, [$beg, $end, 1, $sip, 1];
            $gpCount += 1;    # count it as good
            $lastPeriodGood = 1;
        } else {
            # This period does not have enough snapshots to be considered 'good'
            if (!$lastPeriodGood) {
                # last one was not good either -- combine them
                $good[-1][0]  = $beg;
                $good[-1][3] += $sip;
                $good[-1][4] += 1;
            } else {
                # this is the first bad one
                push @good, [$beg, $end, 0, $sip, 1];
            }
            $lastPeriodGood = 0;
        }
        ($beg, $end) = prevPeriod($beg, $spec->{periodn});
    }
    debug "fGP: returning c=$gpCount, " . (join(' ', 
        map {pair2range(@{$_}[0], @{$_}[1]) . "=@{$_}[2]:@{$_}[3]/@{$_}[4]"} @good)) . "\n", 3;
    return ($gpCount, @good);
}

#---------------------------------------------------------------------------------------------------

sub findGoodPeriodsNoCal ($$$\@) {
    # Starting with period ($beg, $end) and working backwards in time, 
    # check for $count periods each with at least $freqmin snapshots.
    # Return the [beginning, end, good?, snapshots-in-period, period-count] for each period
    # (including the gaps between the 'good' periods).
    # This version does not keep periods aligned to calendar days/weeks/months etc.
    # The ($beg, $end) of the last one is then where we're up to.
    my $beg  = shift;
    my $end  = shift;
    my $spec = shift;
    my @S    = @{(shift)};

    my $gpCount = 0;
    my @good;
    #if (!@S) { # no longer valid, can have freqmin==0 !      FIXME reinstate?
    #    # No snapshots, so no good periods
    #    debug "fGPnC: \@S is empty!\n", 3;
    #    return ($gpCount, @good);
    #}
    my $oldestS = $S[-1] // MAXTIME;
    debug "\nfGPnC: range=" . pair2range($beg, $end) . 
        " freqmin=$spec->{freqmin} periodn=$spec->{periodn} " . 
        "count=$spec->{count} oldestS=" . time2stamp($oldestS) . "\n", 3;

    # Special case:
    # if this is an 'unlimited' spec, then its count will be (effectively) infinite
    # -- we need to keep filling periods until there are no more snapshots
    # -- if any periods have less than freqmin, then relax, just treat them as full
    # This is all dealt with simply by the condition count==UNLIMITED below.

    while (($end > $oldestS) and
        ($gpCount < $spec->{count})   ) {
        debug "===fGPnC: looking for $spec->{freqmin} snapshots in one $spec->{period}\n", 3;
        my $sip = snapshotsInPeriod(@S, $beg, $end);
        # Look for a contiguous period first
        if (($spec->{count} == UNLIMITED) or 
            ($sip >= $spec->{freqmin}   )    ) {
            push @good, [$beg, $end, 1, $sip, 1];
            $gpCount += 1;    # count it as good
            debug "fGPnC: good one: range=" . pair2range($beg, $end) . " sip=$sip pc=1\n";
        } else {
            # No contiguous period --
            # find a group of freqmin snapshots within a period 
            # keeping track of the gap between that group and the last good period
            my $gapend = $end;
            my $skippedSnapshots = 0;
            my $nextS = $end;   # start search where we're up to
            while (($nextS = nextOldestSnapshot($nextS, @S))               and  # yes, '=' not '=='
                   (($beg, $end) = prevPeriod($nextS+1, $spec->{periodn})) and
                   (($sip = snapshotsInPeriod(@S, $beg, $end)) < $spec->{freqmin})) {
                # carry on looking
                $skippedSnapshots += 1;
                debug "fGPnC: skipping nextS=" . time2stamp($nextS) . 
                    ", skipped=$skippedSnapshots\n", 3;
            }
            my $pc = countPeriods($end, $gapend, $spec->{periodn});
            if ($nextS) {
                # found a $nextS which marks the end a good period
                push @good, [$end, $gapend, 0, $skippedSnapshots, $pc]; 
                debug "fGPnC: gap: range=" . pair2range($end, $gapend) . 
                    " skippedSnapshots=$skippedSnapshots pc=$pc\n";
                push @good, [$beg, $end, 1, $sip, 1];
                debug "fGPnC: good after gap: range=" . pair2range($beg, $end) . " sip=$sip pc=1\n";
                $gpCount += 1;
            } else {
                # ran out of snapshots
                push @good, [$oldestS, $gapend, 0, $skippedSnapshots, $pc];
                debug "fGPnC: gap to oldestS: range=" . pair2range($oldestS, $gapend) . 
                    " skippedSnapshots=$skippedSnapshots pc=$pc\n";
            }

        }
        ($beg, $end) = prevPeriod($beg, $spec->{periodn});
    }

    debug "fGPnC: returning c=$gpCount, " . (join(' ', 
        map {pair2range(@{$_}[0], @{$_}[1]) . "=@{$_}[2]:@{$_}[3]/@{$_}[4]"} @good)) . "\n", 3;
    return ($gpCount, @good);
}

#---------------------------------------------------------------------------------------------------

sub findAllPeriods ($$$\@) {
    # Expand a spec into a list of periods, starting with ($beg, $end).
    # Unlike findGoodPeriods, this doesn't care if the periods
    # have the expected number of snapshots
    my $beg  = shift;
    my $end  = shift;
    my $spec = shift;
    my @S    = @{(shift)};
    return (0, ()) if !@S;
    my @all;
    for my $c (1..$spec->{count}) {
        my $sip = snapshotsInPeriod(@S, $beg, $end);
        # each entry is: [beginning, end, good?, snapshots-in-period, period-count]
        push @all, [$beg, $end, 1, $sip, 1];
        ($beg, $end) = prevPeriod($beg, $spec->{periodn});
    }
    return ($spec->{count}, @all);
}   

#===================================================================================================
# Specs

sub compileSpecs ($$;$) {  
    # 'Compile' the specs into a list that takes into account
    # the current date and existing snapshots.
    # Works backwards in time from 'now'.
    my $now        = shift;
    my $specsR     = shift; # = @{(shift)};
    my $quiet      = shift // 0;   

    my $oldestS = $now; # Time of oldest snapshot
    # List good and bad snapshots separately
    my (@Sgood, @Sbad);
    foreach my $s (rsort keys %S) {
        if ($S{$s}{partial}) {
            push @Sbad, $s;
        } else {
            push @Sgood, $s;
        }
        $oldestS = $s if $s < $oldestS; # including the bad ones
    }

    my $pl = 2;
    if ($quiet and !$Opt{debug}) {
        # In 'quiet' mode, override the print and log levels
        # so that the user doesn't see unnecessary messages
        # (there may only be debug messages here later) TODO
        # TODO in fact quiet mode may not be needed any more if 
        # compileSpecs is only called once
        $pl = 9;
    }    
    debug "compileSpecs: now=" . time2stamp($now) . " quiet=$quiet\n", 3;

    my $firstSpec = 1;  # first spec applies to the current period
    my @cSpecs;

    # Not like this -- need to take account of bad ones too
    #my $oldestS = @S ? $S[-1] : $now; # back to the oldestS idea

    my $end = $now + 1; # +1 to ensure 'now' is within the current period
    debug "cS: starting with oldestS=" . time2stamp($oldestS) . 
        ", end=" . time2stamp($end) . "\n", 3;

    foreach my $spec (@$specsR) {

        my $beg;
        my $p = 1; # count the periods
        my @goodPeriods;
        my $gpCount = 0;

        if ($Opt{calendar}) {
            # beginning of period containing (end-1)
            ($beg, undef) = getPeriod($end - 1, $spec->{periodn});
        } else {
            # period that ends now
            ($beg, undef) = prevPeriod($end, $spec->{periodn});
        }

        debug "cS: [1] spec=$spec->{rawspec} beg,end=" . pair2range($beg,$end) . "\n", 3;

        if (!fullPeriod($beg, $end, $spec->{periodn})) { 
            # This is a partial period -- either the current period (if it's the first spec),
            # or because of a change of period
            my $sip = snapshotsInPeriod(@Sgood, $beg, $end);
            if ($firstSpec and $sip >= $spec->{freqmin}) {  
                # This partial period can count as a good one -- do nothing here
                debug "cS: firstSpec and enough S's -- will count as good\n", 3;
            } else {
                # Period is incomplete ...?
                push @cSpecs, {
                    beg     => $beg, 
                    end     => $end, 
                    freqmin => $spec->{freqmin},
                    freqmax => ($firstSpec and !$Opt{'delete-cp'}) ? -1 : $spec->{freqmax},    
                        # -1 means keep all
                    count   => $spec->{count},
                    period  => $spec->{period},
                    best    => min(bestOffset($spec->{period}, $beg), $end-$beg-1),  
                        # limit best to partial period
                    label   => $spec->{rawspec} . ($firstSpec ? '-current' : '-partial'),
                    sgood   => $sip,
                    sbad    => snapshotsInPeriod(@Sbad, $beg, $end),
                };  
                # If $end>$oldestS, we should append 'empty' to the label 
                $cSpecs[-1]->{label} .= ' empty (1)' if $end <= $oldestS;  # is this a nasty hack?  
                    # YES -- maybe we should stop compiling or at least printing out the 
                    #   cSpecs once there are no more snapshots   FIXME
                debug "cS: created cSpec [1] " . pair2range($cSpecs[-1]->{beg},$cSpecs[-1]->{end})
                    . " freq=$cSpecs[-1]->{freqmin}-$cSpecs[-1]->{freqmax} " . 
                    "count=$cSpecs[-1]->{count} period=$cSpecs[-1]->{period} best=" . 
                    time2stamp($cSpecs[-1]->{beg}+$cSpecs[-1]->{best}) . 
                    " label=$cSpecs[-1]->{label} " . 
                    "snapshots=$cSpecs[-1]->{sgood}/$cSpecs[-1]->{sbad}\n", 3;
                # move to previous complete period
                ($beg, $end) = prevPeriod($beg, $spec->{periodn});   
            }
        }

        debug "cS: [2] spec=$spec->{rawspec} beg,end=" . pair2range($beg,$end) . "\n", 3;

        # get list of good periods starting with beg,end
        if ($Opt{safe}) {
            if ($Opt{calendar}) {
                ($gpCount, @goodPeriods) = findGoodPeriods($beg, $end, $spec, @Sgood);
            } else {
                ($gpCount, @goodPeriods) = findGoodPeriodsNoCal($beg, $end, $spec, @Sgood);
            }
        } else {
            # unsafe mode, with or without calendar mode
            ($gpCount, @goodPeriods) = findAllPeriods($beg, $end, $spec, @Sgood);
        }

        foreach my $gpRef (@goodPeriods) {
            ($beg, $end, my $good, my $sip, my $pCount) = @$gpRef;
            if (!$good) { # there's a gap -- either 1 or more incomplete periods, 
                # or (in no-calendar mode) a fractional number of incomplete periods
                push @cSpecs, {
                    beg     => $beg,
                    end     => $end,
                    freqmin => $spec->{freqmin},
                    freqmax => -1,    # keep them all
                    period  => $spec->{period},
                    count   => $pCount,   # may be fractional
                    best    => 0,
                    label   => 'skipped - incomplete ' . $LevelName[$spec->{periodn}] . '(s)',   
                    sgood   => $sip,
                    sbad    => snapshotsInPeriod(@Sbad, $beg, $end), 
                };
                # FIXME if there are no more snapshots, then printing 'incomplete period'
                # (which may be for a fractional period) and then doing a list of 'empty' cSpecs
                # looks silly.  Possibly.
                debug "cS: created cSpec [3] " . pair2range($cSpecs[-1]->{beg},$cSpecs[-1]->{end})
                    . " freq=$cSpecs[-1]->{freqmin}-$cSpecs[-1]->{freqmax} " . 
                    "count=$cSpecs[-1]->{count} period=$cSpecs[-1]->{period} best=" . 
                    time2stamp($cSpecs[-1]->{beg}+$cSpecs[-1]->{best}) . 
                    " label=$cSpecs[-1]->{label} " . 
                    "snapshots=$cSpecs[-1]->{sgood}/$cSpecs[-1]->{sbad}\n", 3;
            } else { # it's a complete period
                push @cSpecs, {
                    beg     => $beg, 
                    end     => $end, 
                    freqmin => $spec->{freqmin},
                    # if this is the first period, apply the delete-cp option
                    freqmax => (($end == $now+1) and !$Opt{'delete-cp'}) ? -1 : $spec->{freqmax}, 
                    period  => $spec->{period},
                    count   => $spec->{count},
                    best    => bestOffset($spec->{period}, $beg),
                    label   => $spec->{rawspec} . "-$p",
                    sgood   => $sip, 
                    sbad    => snapshotsInPeriod(@Sbad, $beg, $end), 
                };  
                debug "cS: created cSpec [4] " . pair2range($cSpecs[-1]->{beg},$cSpecs[-1]->{end}) .
                    " freq=$cSpecs[-1]->{freqmin}-$cSpecs[-1]->{freqmax} " . 
                    "count=$cSpecs[-1]->{count} period=$cSpecs[-1]->{period} best=" . 
                    time2stamp($cSpecs[-1]->{beg}+$cSpecs[-1]->{best}) . 
                    "label=$cSpecs[-1]->{label} " . 
                    "snapshots=$cSpecs[-1]->{sgood}/$cSpecs[-1]->{sbad}\n", 3;
                $p += 1;
            }
            # Move back a period beyond @goodPeriods
            ($beg, $end) = prevPeriod($beg, $spec->{periodn}); 
        } # foreach $gpRef

        debug "cS: [3] spec=$spec->{rawspec} beg,end=" . pair2range($beg,$end) . "\n", 3;

        # We'll get straight here for specs after the one with not enough good periods
        # (or possibly first time if there aren't any specs)
        # NOTE -- we're just accessing the array @goodPeriod.
        # If count is UNLIMITED, potentially unlimited specs -- just do one for documentation.
        my $count = ($spec->{count} == UNLIMITED) ? 1 : $spec->{count};
        debug "cS: any left over? gpCount=$gpCount, count=$count \n", 3;
        for my $i (($gpCount+1)..$count) {
            # HERE THERE ARE NO MORE SPECS!! FIXME should that be NO MORE SNAPSHOTS ? 
            # WE'RE JUST ITERATING THE REMAINING PERIODS OF REMAINING SPECS
            push @cSpecs, {
                beg     => $beg,
                end     => $end,
                freqmin => $spec->{freqmin},
                freqmax => $spec->{freqmax},    # no reason for -1 here
                period  => $spec->{period},
                count   => $spec->{count},    # or 0,  ?
                best    => 0,
                label   => $spec->{rawspec} . "-$p empty (2)",
                sgood   => snapshotsInPeriod(@Sgood, $beg, $end), 
                    # should always be 0 -- we'll check
                sbad    => snapshotsInPeriod(@Sbad, $beg, $end), 
                    # should always be 0 -- we'll check
            };  
            debug "cS: 'empty' cSpec is not empty!!!!!!!!!!!!!!!!!!!!\n", 1 
                if snapshotsInPeriod(@Sgood, $beg, $end) > 0 ;
            debug "cS: created cSpec [5] " . pair2range($cSpecs[-1]->{beg},$cSpecs[-1]->{end}) . 
                " freq=$cSpecs[-1]->{freqmin}-$cSpecs[-1]->{freqmax} " . 
                "count=$cSpecs[-1]->{count} period=$cSpecs[-1]->{period} best=" . 
                time2stamp($cSpecs[-1]->{beg}+$cSpecs[-1]->{best}) . 
                " label=$cSpecs[-1]->{label} " . 
                "snapshots=$cSpecs[-1]->{sgood}/$cSpecs[-1]->{sbad}\n", 3;
            $p += 1;
            ($beg, $end) = prevPeriod($beg, $spec->{periodn});
        }

        # At this point, beg,end is the next period to consider for the CURRENT spec
        # i.e. its end is OK, but its beg is wrong
        # that's fine, we're working back from that end, so
        # we don't even need now = end -- leave end as it is for next time round loop.

        $firstSpec = 0;

    } # for each spec

    # If there are any snapshots left, they're not needed by any of the specs,
    # and can all be deleted
    if ($end > $oldestS) {
        push @cSpecs, {
            beg     => $oldestS,
            end     => $end,
            freqmin => 0,
            freqmax => 0,     # keep none of them
            period  => '',    # not a proper period
            count   => 1,     # there is 1 of these
            best    => 0,
            label   => "old",
            sgood   => snapshotsInPeriod(@Sgood, $oldestS, $end), 
            sbad    => snapshotsInPeriod(@Sbad, $oldestS, $end), 
        };  
        debug "cS: created cSpec [6] " . pair2range($cSpecs[-1]->{beg},$cSpecs[-1]->{end}) . 
            " freq=$cSpecs[-1]->{freqmin}-$cSpecs[-1]->{freqmax} " . 
            "count=$cSpecs[-1]->{count} period=$cSpecs[-1]->{period} best=" . 
            time2stamp($cSpecs[-1]->{beg}+$cSpecs[-1]->{best}) . 
            " label=$cSpecs[-1]->{label} snapshots=$cSpecs[-1]->{sgood}/$cSpecs[-1]->{sbad}\n", 3;
    }

    # Double check that it's ok
    my $lastbeg = $cSpecs[0]->{end};
    foreach my $c (@cSpecs) {
        if ($c->{end} != $lastbeg) {
            debug "      skipped " . fmtRange($c->{end}, $lastbeg) . ' with ' . 
                snapshotsInPeriod(@Sgood, $c->{end}, $lastbeg) . " snapshots\n", 0;
            debug "      !!!!!!!!!!!!! This shouldn't happen any more!\n", 0; 
        }
        if ($c->{beg} > $c->{end}) {
            debug "      invalid cSpec -- beg > end: " . fmtRange($c->{beg}, $c->{end}) . "\n", 0; 
            debug "      !!!!!!!!!!!!! This shouldn't happen any more!\n", 0; 
        }
        $lastbeg = $c->{beg};
    }

    return @cSpecs;

} # compileSpecs

#---------------------------------------------------------------------------------------------------

sub displayCSpecs (\@;\%) {
    # Display the compiled specs
    my @cSpecs = @{(shift)};
    my $Sref   = shift;   # optional

    printlog "\nCompiled specs:\n", 3;  
    printlog   "---------------\n", 3;

    # e.g.  From              To                F  P      C  Comment               Ss    Xs    Ds
    #       20080101-111122 - 20090101-221111   0  d  99999  6d7.............30  9999  9999  9999
    printlog sprintf("%-15s - %-15s  %5s  %1s  %5s  %-30s  %4s  %4s  %4s\n",
        'From', 'To', 'Freq', 'P', 'C', 'Comment', 'Ss', 'Xs', 'Ds'), 3;
    printlog sprintf("%-15s - %-15s  %5s  %1s  %5s  %-30s  %4s  %4s  %4s\n",
        '-'x15, '-'x15, '-----', '-', '-----', '-'x30, '----', '----', '----'), 3;
    my $totalS = 0;
    my $totalX = 0;
    my $totalD = 0;
    foreach my $c (@cSpecs) { 
        my $excess = 0; # how many to delete
        if ($c->{freqmax} >= 0 and 
            $c->{sgood} + $c->{sbad} > $c->{freqmax}) {
            $excess = $c->{sgood}+$c->{sbad} - $c->{freqmax};
        }
        printlog sprintf("%s - %s  %2d:%2d  %1s  %5s  %-30s  %4d  %4d  %4.0d\n",
            time2stamp($c->{beg}), 
            time2stamp($c->{end}),
            $c->{freqmin}, 
            $c->{freqmax} == -1 ? 99 :$c->{freqmax},    # i.e. all
            $c->{period}, 
            $c->{count} eq UNLIMITED ? 'all' : $c->{count},
            $c->{label}, 
            $c->{sgood},
            $c->{sbad},
            $excess,
        ), 3;
        $totalS += $c->{sgood};
        $totalX += $c->{sbad};
        $totalD += $excess;
    }
    printlog sprintf("%-15s   %-15s  %5s  %1s  %5s  %-30s  %4s  %4s  %4s\n",
        '', '', '', '', '', '-' x 30, '----', '----', '----'), 3;
    printlog sprintf("%-15s   %-15s  %5s  %1s  %5s  %-30s  %4d  %4d  %4d\n",
        '', '', '', '', '', 'Totals:', $totalS, $totalX, $totalD), 3;

    # Visualise each cSpec period
    if ($Sref) {
        my (@Sgood, @Sbad);
        # Create arrays of good and bad snapshots
        foreach my $s (rsort keys %$Sref) {
            push @Sgood, $s if !$$Sref{$s};
            push @Sbad,  $s if $$Sref{$s};
        }
        printlog "\nDistribution of existing snapshots within each compiled spec\n", 3;
        printlog "------------------------------------------------------------\n", 3;
        foreach my $c (@cSpecs) {
            my @SiP = snapshotsInPeriod(@Sgood, $c->{beg}, $c->{end}, 1);
            visualise($c->{beg}, $c->{end}, 1, 3,3, 0, $c->{label} => \@SiP);
            if (@Sbad) {
                @SiP = snapshotsInPeriod(@Sbad, $c->{beg}, $c->{end}, 1);
                if (@SiP) {
                    visualise($c->{beg}, $c->{end}, 1, 3,3, 0, ' bad' => \@SiP);
                }
            }
        }
    }

}

#===================================================================================================

sub getExpirableSnapshots ($\@$) {
    # Return a list of snapshots that are 'expirable'
    # because they fall within range of the last 'unlimited' spec,
    # or because the expire-old option allows it
    my $specsR = shift;
    my @cSpecs = @{(shift)};
    my $now    = shift;

    my @S = rsort keys %S;
    debug "gES: \@S=@S specsR=$specsR \$now=$now\n", 3;
    my @expirable;
    # The current snapshot and any that we're linking to
    # are never expirable, so shift them off the local copy of @S
    for my $i (0..$Opt{ldcount}) {
        shift @S; 
    }
    if (!@S) {
        debug "gES: no \@S, so no expirables\n", 3;
        return @expirable;
    }
    # Put partial snapshots on the list first
    foreach my $s (@S) {
        if ($S{$s}{partial}) {
            unshift @expirable, $s;
            #delete $S{$s};  FIXME why was that there?
        }
    }
    debug "gES: expiring partials: " . join(' ', map {time2stamp($_)} @expirable) . "\n", 3;
    @S = rsort keys %S;  # now with no partial snapshots
    # Return if there are none left
    return @expirable if !@S;
    if ($Opt{'expire-old'}) {
        # Any snapshot is expirable so return @S in oldest-first order.
        push @expirable, reverse @S;
        debug "gES: expire-old: they're all expirable EXCEPT the first one(s): \n", 3;
        debug "       " . join(' ', map {time2stamp($_)} @expirable) . "\n", 3;
        return @expirable;
    }
    my $lastSpec = @$specsR[-1];
    if ($lastSpec->{count} == UNLIMITED) {
        my $lastraw = $lastSpec->{rawspec};
        my $i = $#cSpecs;
        # Pick out snapshots in the 'unlimited' cSpec, which is always at the end
        while (($i >= 0) and ($cSpecs[$i]->{label} =~ /^($lastraw)/)) {
            debug "gES: lastC is unlimited, getting expirables\n", 9; 
            unshift @expirable, snapshotsInPeriod(@S, $cSpecs[$i]->{beg}, $cSpecs[$i]->{end}, 1);
            $i -= 1;
        }
    }
    debug "gES: returning expirables: " . join(' ', map {time2stamp($_)} @expirable) . "\n", 3;
    return @expirable;
}

#===================================================================================================

sub newSnapshot ($) {
    # Create a new snapshot stamped with the current time,
    # add the entry to the %S hash, and return its time stamp
    # (making sure that a directory with the corresponding
    # name doesn't already exist).
    my $dest = shift;
    my $snapshot = time();
    my $name = "$Opt{template}-" . time2stamp($snapshot);
    my $fullname = "$dest/$name";
    while ($S{$snapshot} or -e $fullname) {
        debug "Sleeping for a second...\n", 3;
        # Yes, we could just add 1 to $snapshot,
        # but then we might end up in the future...
        sleep 1;
        $snapshot = time();
        $name = "$Opt{template}-" . time2stamp($snapshot);
        $fullname = "$dest/$name";
    }
    $S{$snapshot} = {
        name     => $name,
        path     => $dest,
        fullname => $fullname,
        partial  => 0,
        size     => -1, # not known yet
        remote   => remote($dest),
        daemon   => remoteDaemon($dest),
    };
    return $snapshot;
}

#---------------------------------------------------------------------------------------------------

sub runRsync ($\@$) {
    # Run rsync to create the snapshot.
    # If it fails for lack of disk space, delete expirable snapshots and try again.
    # Returns 1 for successful creation of a new snapshot.
    my $dest               = shift; 
    my @expirableSnapshots = @{(shift)};
    my $snapshot           = shift;
    my @S = rsort keys %S;
    debug "runRsync: \@eS='@expirableSnapshots' snapshot " . dumpSnapshot($snapshot) . ")\n", 9;

    # Set up verbosity option
    my $verbose = '';
    $verbose = '--verbose' if $Opt{verbose} > 2;
    $verbose .= ' --verbose --stats' if $Opt{verbose} > 3;  

    # Add the include/exclude options -- there may be several of each
    # Note that each file/directory is double-quoted to allow escapes to work
    # (see stripQuotes()).
    my $incExcOpts = '';
    foreach my $opt (qw(include include-from exclude exclude-from)) {
        $incExcOpts .= join(' ', map {"--$opt \"$_\""} @{$Opt{$opt}});
    }

    my $remoteDest = remote($dest);

    my $succeeded = 1;  # stays true if ALL sources are copied successfully
    my $sourcesSucceeded = 0;   # count of successfully backed-up sources
    my $restartable = 0;        # becomes true if partial snapshot should be kept for restarting

    my $deletionsAllSources = 0;

    # Loop through sources one at a time
    SOURCE:
    foreach my $source (@{$Opt{source}}) {

        my $location = $source->{location};
        printlog "\nCopying from source '$location'\n", 1;
        my $remoteSource = remote($location);

        # Override options for this source
        local %Opt = %Opt;
        foreach my $srcOpt (keys %{$source->{options}}) {
            debug "rR: overriding $srcOpt with '$source->{options}->{$srcOpt}'\n", 1;
            $Opt{$srcOpt} = $source->{options}->{$srcOpt};
        }

        # Source and destination can not both be remote (rsync limitation)
        if ($remoteDest and $remoteSource) {
            printlog "WARNING: source '$location' and destination '$dest' are both remote\n";
            printlog "         rsync can not do that -- combination has been skipped\n";
            next SOURCE;
        }

        my $destDir = $S{$snapshot}{fullname};    
        #debug "rR: dest '$dest'  destdir '$destDir'\n", 1;

        my $subDir  = '';   # These two are for adjusting the link-dest path
        my $upDir   = '';

        if ($remoteSource) {
            $subDir = sourceDir($location);
        } else {
            $subDir = hostname;
        }
        # The extra directory level won't be created by rsync normally,
        # so we'll have to do it manually
        # (It may already be there)
        my $mdrc = mkdirRsync("$destDir");
        printlog "WARNING: Unable to create directory '$destDir' ($!)\n" if $mdrc;
        unless ($mdrc or $Opt{'dry-run'}) {
            $destDir = "$destDir/$subDir"; # can't use catdir because it nobbles rsync:// URLs
            $upDir = '../'; 
        }

        # Set up link-dest options if there are any previous snapshots
        # (as a relative path, which will work whether local or remote).
        # Loop to create as many link-dests as required.
        # Previous 'bad' snapshots are linked in case they contain useful
        # files, but don't count towards the total.
        my $ld = 0; # number of 'good' link-dests created
        my $s = 1;  # start at snapshot 1 (i.e. skip the 0th one that we're creating now)
        my $linkdest = '';
        while ($ld < $Opt{ldcount} and $s <= $#S) {
            debug "rR: linking: s=$s S[s]=$S[$s] S{S[s]}{name}=$S{$S[$s]}{name}\n", 9;
            $linkdest .= "--link-dest='$upDir../$S{$S[$s]}{name}/$subDir' ";
            $ld += 1 if !$S{$S[$s]}{partial};
            $s += 1;
        }

        # Set compression option
        my $compression = '';
        $compression = '--compress' if $Opt{compress} and ($remoteSource or $remoteDest);

        # Set bandwidth limit, depending on the direction
        # (or none if dest and source are both local)
        my $bwlimit = '';
        $bwlimit = "--bwlimit=$Opt{'bwlimit-in'}"  if $remoteSource;
        $bwlimit = "--bwlimit=$Opt{'bwlimit-out'}" if $remoteDest;

        # Set remote rsync option
        my $rsyncPath = '';
        $rsyncPath = "--rsync-path '$Opt{'remote-rsync-cmd'}'"
            if ($Opt{'remote-rsync-cmd'} and ($remoteSource or $remoteDest));

        printlog "Running rsync from source '$location' to destination '$destDir'\n", 2;
        # Note that rsync-opts is put first -- 
        # our own required options will override the user's
        my $args = "$Opt{'rsync-opts'} $verbose $linkdest $incExcOpts $compression " . 
            "$bwlimit --relative $rsyncPath '$location' '$destDir'";

        my $maxTries = @expirableSnapshots + 1; 
        my $keepTrying = $maxTries;  
        my $deletions = 0;
        my $tries = 0;
        # Run rsync, dealing with various types of error
        while ($keepTrying and !$Interrupted) {
            $tries += 1;
            printlog "Running rsync -- try $tries of $maxTries\n", 2;
            my $rsyncInterrupted = '';     # only true of interrupted during the main rsync  
            my ($rc, $rc2) = systemCall($Opt{'rsync-cmd'}, $args, 2,2);
            $rsyncInterrupted = $Interrupted;
            debug "after rsync rc=$rc rc2='$rc2' rsyncInterrupted='$rsyncInterrupted'\n", 1;
            given ($rc) {
                #* success
                when (0) {
                #when ($_ == 0 and (!($location =~ /cache/) or rand()>0.5 ))  # for debugging!
                    debug "rR: success\n", 1;
                    $keepTrying = 0;    # no need to try this source again
                    $sourcesSucceeded += 1;
                    $Summary{$dest}{$location} = 'succeeded';
                }
                #* source not found
                when (($_ == 23) and ($rc2 eq 'nofileordir')) {
                    printlog "NOTE: source '$location' could not be read -- " . 
                        "will continue with any other sources\n", 1;
                    $keepTrying = 0;    # don't try this source again
                    $succeeded = 0;
                    $Summary{$dest}{$location} = 'source not found';
                }
                #* errors that can (usually) be ignored, treat as successful 
                when ([22, 23, 24]) {   
                    # Errors on some files such as problems with permissions,
                    # or files that have vanished -- carry on
                    printlog "NOTE: some errors from rsync have been ignored\n", 2;
                    $keepTrying = 0;
                    $sourcesSucceeded += 1;
                    $Summary{$dest}{$location} = 'succeeded (minor errors ignored)';
                }
                #* interrupted
                when ($rsyncInterrupted ne '' or $rc2 eq 'interrupted') {
                    printlog "NOTE: rsync was interrupted with signal '$rsyncInterrupted' -- " .
                        "the snapshot will be kept to allow restart\n", 1;
                    $keepTrying = 0;
                    $succeeded = 0;
                    $restartable = 1;
                    $Summary{$dest}{$location} = 'interrupted';
                    last SOURCE;
                }
                #* errors that can be recovered from -- i.e. lack of space (sometimes)
                when (($_ == 12) and ($rc2 eq 'diskfull') and ($keepTrying > 0)) {
                    # Try to make some space before having another go
                    printlog "WARNING: destination '$dest' is full -- " . 
                        "will delete an old snapshot and try again\n";
                    debug "rR: _=$_ rc=$rc rc2=$rc2 keepTrying=$keepTrying\n", 1;
                    my $deleted = deleteOldSnapshots(@expirableSnapshots, 1);
                    if ($deleted >= 1) {
                        # More space freed, so try again
                        printlog "NOTE: Old snapshot deleted successfully -- continuing\n";
                        $deletions += $deleted;
                        $deletionsAllSources += $deleted;
                        $keepTrying -= $deleted;
                        $Summary{$dest}{$location} = 'failed (will try again)';
                    } else {
                        # No snapshots deleted, so stop trying
                        printlog "ERROR: unable to delete old snapshot to make space\n", 1;
                        $keepTrying = 0;
                        $succeeded = 0;
                        $ExitCode = EXITRSYNC;
                        $Summary{$dest}{$location} = 'failed (not enough space)';
                        last SOURCE;
                    }
                }
                #* error that means rename/delete/abandon whole destination
                # 11 e.g. include-from file not found
                # 12 with rc2 = 'nofileordir' i.e. bad destination
                # 5 - failed to start rsyncd protocol
                # 255, various, including wrong ssh password, 
                # -1
                # etc.
                default {
                    printlog "ERROR: rsync reported a serious problem ($rc / '$rc2')\n", 1;
                    $keepTrying = 0;
                    $succeeded = 0;
                    $ExitCode = $rc >= 1000 ? EXITINT : EXITRSYNC;
                    $Summary{$dest}{$location} = "failed (error $rc / '$rc2')";
                    last SOURCE;
                }
            } # given

            debug "rR: No more tries\n", 4 if $keepTrying <= 0;
        } # while keep trying for this source

        if ($deletions) {
            printlog "NOTE: $deletions expirable snapshots were deleted while " . 
                "processing source '$location'\n", 2;
            printlog "(dry run: no snapshots actually deleted)\n", 2 if $Opt{'dry-run'};
        }

    } # for each source

    if ($succeeded) {
        printlog "\nrsync successfully created new snapshot '$S{$snapshot}{fullname}'\n", 1;  
        printlog "(dry run: no snapshot actually created)\n", 1 if $Opt{'dry-run'};
        if ($deletionsAllSources) {
            printlog "NOTE: $deletionsAllSources expirable snapshots were deleted" . 
                " from destination '$dest'\n", 2;
            printlog "(dry run: no snapshots actually deleted)\n", 2 if $Opt{'dry-run'};
        }
        $Summary{$dest}{$DestResult} = 'succeeded';
    } else {
        printlog "\nWARNING: rsync did NOT create a complete new snapshot on" . 
            " destination '$dest'\n", 1;
        printlog   "         $sourcesSucceeded out of " . @{$Opt{source}} . 
            " sources were completed\n", 1;
        if ($restartable and $Opt{'allow-restart'}) {
            printlog "NOTE: partial snapshot has been left to allow the run to be restarted\n", 1;
            printlog "      (use the --restart option to do so)\n", 1;
            $Summary{$dest}{$DestResult} = 'incomplete (restartable)';
        } else {
            $Summary{$dest}{$DestResult} = "failed -- $sourcesSucceeded sources succeeded";
        }
        markOrDeleteSnapshot($snapshot, $sourcesSucceeded, $restartable);
    }

    return $succeeded;
}

#---------------------------------------------------------------------------------------------------

sub processDestination ($) {
    # Do the processing for a single destination
    my $dest  = shift;      
    #my @specs = @{(shift)};

    # Get list of existing snapshots
    getSnapshotList($dest);
    my @S = rsort keys %S;
    debug "run: got list of " . @S . " snapshots\n", 4;

    # If there are no previous snapshots, ignore the 'restart' option
    if ($Opt{restart} and !%S) {
        printlog "NOTE: No previous snapshots found, so 'restart' option will be ignored\n", 1;
        $Opt{restart} = 0;
    }

    my $snapshot;
    if ($Opt{restart}) {
        # Restarting the previous snapshot
        $snapshot = $S[0];
        debug "run: restarting with snapshot=$snapshot: " . dumpSnapshot($snapshot) . "\n", 9;
        printlog "NOTE: Restarting snapshot $S{$snapshot}{name}\n", 1;
    } else {
        # Normal run, creating a new snapshot.
        # Create the new entry in %S, and get the new time stamp
        $snapshot = newSnapshot($dest);
        # and include it in the list 
        unshift @S, $snapshot; # if $Opt{snapshot};;
    }

    if ($Opt{snapshot}) {
        printlog "\nCreating snapshot $S{$snapshot}{name} on destination $dest\n", 1;
        printlog '-' x (50 + length($dest) + length($Opt{template})) . "\n", 1;
        # Check when the last snapshot was run (if we're not restarting)
        if ((!$Opt{restart}                           ) and
            (@S > 1                                   ) and
            ($S[0] - $S[1] < $Opt{'min-interval'} * 60)     ) {
            printlog "NOTE: It has been less than $Opt{'min-interval'} minutes" . 
                " since the last snapshot -- stopping\n", 1;
            return;
        }
    } else { 
        debug "run: not creating snapshot because !\$Opt{snapshot}", 1;
    }

    # 'Compile' the specs taking account of current time and existing snapshots
    my @cSpecs;
    @cSpecs = compileSpecs($snapshot, $Opt{pspecs});
    displayCSpecs(@cSpecs);
    
    # Get the list of snapshots to be deleted
    my @D;
    @D = getDeleteList(@cSpecs) if $Opt{delete};

    # See if the new snapshot would be one of the ones deleted
    my $deleteNew = grep {$_ == $snapshot} @D;

    if ($Opt{snapshot}) {
        if ($deleteNew and $Opt{delete} and $Opt{'delete-cp'} and !$Opt{'allow-restart'}) {
            printlog "NOTE: new snapshot would be immediately deleted," . 
                " so rsync will NOT be run\n", 1;
        } else {
            my @expirableSnapshots = getExpirableSnapshots($Opt{pspecs}, @cSpecs, $snapshot);
            # Run rsync to create the new snapshot
            my $rsyncOK = runRsync($dest, @expirableSnapshots, $snapshot);  
            if (!$rsyncOK and $Opt{delete}) {
                # Failed to create a new snapshot, so re-do the list of deletions
                #getSnapshotList($dest);   # is this enough or too much?  FIXME needed?
                #@D = getDeleteList(@cSpecs, 3); # 3 should be 9 FIXME -- level, and needed?
            }
        }
    } else {
        printlog "NOTE: Option 'no-snapshot' given -- no new snapshot will be created\n", 2;
    }

    if ($Opt{delete} and !$Interrupted) {
        deleteSnapshots(@D, @cSpecs, $deleteNew);
        # Get new snapshot list after deletions 
        #getSnapshotList($dest); # FIXME needed?
    } else {
        printlog "NOTE: Option 'no-delete' given, so no existing snapshots will be deleted\n", 2;
    }

    # Complete and store the metadata
    updateSnapshotSizes();
    writeMetadata($dest);
    # Display the current situation
    # after recompiling the specs to allow for changes
    #@cSpecs = compileSpecs($snapshot, @specs, 1);  
    #   # FIXME this is just to make status more helpful -- is it really needed?
    status($dest, @cSpecs);

}

#---------------------------------------------------------------------------------------------------
    
sub systemCall ($$$$;$$) {
    # Run a system command, given as a program name and argument string.
    # Return the command's return code and extra info if possible.
    # Elaborate scheme for catching STDOUT and STDERR taken from the PERL FAQ 
    # http://perldoc.perl.org/perlfaq8.html#How-can-I-capture-STDERR-from-an-external-command?
    my $cmd         = shift;
    my $args        = shift;    # as a string
    my $stdoutLevel = shift;
    my $stderrLevel = shift;
    my $stdoutRef   = shift;    # if specified, it's an array reference that will receive lines 
                                # from stdout OR a file handle to store stdout lines in
    my $stderrRef   = shift;    # ditto for stderr
    my $rc = 0;
    my $rc2 = '';
    if ($Opt{'dry-run'}) {
        if ($cmd eq $Opt{'rsync-cmd'}) {
            # Special case: if cmd is 'rsync', pass dry-run to rsync and really run it
            # (added at the beginning because of source and dest)
            $args = '--dry-run ' . $args;
        } else {
            printlog "Dry-run: would have run '$cmd $args'\n", 1;
            return 0;
        }
    }
    debug "systemCall: cmd=|$cmd| args=|$args|\n", 5;
    printlog "Running command: $cmd $args\n", $stdoutLevel;
    {
        local *CATCHERR = IO::File->new_tmpfile;
        my $pid = open3(gensym, \*CATCHOUT, ">&CATCHERR", "$cmd $args");
        # Deal with stdout from $cmd
        my $outputStarted = 0;
        while (<CATCHOUT>) {
            if (!$outputStarted) {
                printlog "------- $cmd output starts\n", $stdoutLevel unless $stdoutRef;
                $outputStarted = 1;
            }
            if (ref($stdoutRef) eq 'ARRAY') {
                push @$stdoutRef, $_; 
            } elsif (ref($stdoutRef) eq 'GLOB') {
                print $stdoutRef $_;
            } else {
                printlog $_, $stdoutLevel;
            }
        }
        if ($outputStarted) {
            printlog "------- $cmd output ends\n", $stdoutLevel unless $stdoutRef;
        }
        waitpid($pid, 0);
        $rc = $?;
        $rc2 = '';
        # Deal with stderr from $cmd
        seek CATCHERR, 0, 0;
        $outputStarted = 0;
        while (<CATCHERR>) {
            if (!$outputStarted) {
                printlog "------- $cmd errors start\n", $stderrLevel unless $stderrRef;
                $outputStarted = 1;
            }
            # scan for specific errors
            if (/No space left on device/i) {    # (this text is not always there)
                $rc2 = 'diskfull';
            } elsif (/No such file or directory/i) {
                $rc2 = 'nofileordir';
            } elsif (/received SIGINT/i) {
                $rc2 = 'interrupted';
            }
            if (ref($stderrRef) eq 'ARRAY') {
                push @$stderrRef, $_; 
            } elsif (ref($stderrRef) eq 'GLOB') {
                print $stdoutRef $_;
            } else {
                printlog $_, $stderrLevel;
            }
        }
        if ($outputStarted) {
            printlog "------- $cmd errors end\n", $stderrLevel unless $stderrRef;
        }
    }
    if ($rc == -1) {
        debug "sC: Failed to execute command '$cmd $args': $!\n", 1;
    } elsif ($rc & 127) {
        my $sig = $rc & 127;
        debug "sC: Command '$cmd $args' died with signal $sig\n", 1;
        #  ($? & 127),  ($? & 128) ? 'with' : 'without';
        $rc = ($rc & 127) + 1000;
    } else {
        $rc = $rc >> 8;
        debug "sC: Command '$cmd $args' exited with value $rc\n", 1 if $rc;
    }
    return ($rc, $rc2);
}

#===================================================================================================

# Test suite
# Code here can be called by running the script with the '--test n' option.
# This is for developers (i.e. me) only!

sub testSuite { 

    printlog "\nRunning test $Opt{test}\n";
    printlog   "===============\n";

    # Default options for testing
    $Opt{template} = "test$Opt{test}";
    # FIXME change source and dest to use contexts
    ${$Opt{source}}[0]      = '~/tmp/bstestsource';
    ${$Opt{destination}}[0] = '~/tmp/bstestdest';
    $Opt{lockfile} = '~/tmp/bstest.lock';
    $Opt{verbose}  = 3;
    $Opt{debug}    = 3;
    state $template = $Opt{template};   # 'state' to avoid sharing warning
    state $dest = ${$Opt{destination}}[0];
    state $now = stamp2time('20110529-230000');

    sub mks ($) {
        # Generate a snapshot entry for %S, given its time stamp
        # and variables local to testSuite
        my $stamp = shift;
        return (stamp2time($stamp) => 
            {name=>'$template-$stamp', path=>$dest, 
                fullname=>"$dest/$template-$stamp", 
                partial=>0, size=>-1, remote=>0, daemon=>0});
    }

    given ($Opt{test}) {

        when (1) {
            # parsing specs
            my @specs = (
            '4d2,1d,2w3,1m6',
            '4d2,1d,1m6',
            '2h6,1h,1d,1w',
            '1d7,1d,1w2',   # zero padding
            '1d,1m1',       # jump from day to month
            '1d7,2h3,1d,1w1',
            '0-1d,3-7w,4-4m1',
            '2h3,1d,1w1',  # problem -- doesn't line up hours before lining up days
            '2h3,1w,1m1',  # likewise...
            '1h1,1d1,1h4,1w1,1d1,1h19,1d,1w1', # silly but valid
            '0-0d1',
            '4-3w1',
            '1d1,1w0',
            '1d1,0w1',
            '1d1,1w',
            '6d7,7w1,2w2,4m5,1m6,2y',
            'd1,1q3,abc,-1d1,1.3w2.9, 1d2 ', # check for invalid ones
            );
            foreach my $spec (@specs) {
                print "\nparsing $spec...\n";
                my ($w, $e, @ps) = parseSpecs($spec);
                print "...gives w=$w e=$e " . (join(',', map {"$_->{rawspec}"} @ps)) . "\n";
            }
        }

        # %S needs to look like this:
        # Hash of snapshots, keyed by snapshot Unix time,
        # each entry containing these fields:
        #  name     - name of the snapshot directory e.g. 'docs-20111130-320234'
        #  path     - directory path to name (NOT ending with '/')
        #  fullname - same as path/name   
        #  partial  - true if it's a partial (incomplete) snapshot, 
        #               with a name ending with the suffix
        #  remote   - true if it's on a remote destination
        #  daemon   - true if it's remote and accessed via an rsync daemon
        # Which makes it all very tedious.
        when (2) {
            # 2
            my ($warnings, $errors, @specs) = parseSpecs('3d1');
            %S = (
                mks('20110508-090000'),
                mks('20110508-100000'),
                mks('20110508-120000'),
                mks('20110508-180000'),
            );
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
        }

        # FIXME the rest of the tests don't work anymore because of the 
        # changes to %S -- maybe we'll abandon them.
        # TODO unless we add a sub to generate %S entries.
        when (3) {
            # 3 
            my ($warnings, $errors, @specs) = parseSpecs('3d1');
            %S = (
                mks('20110508-030000'),
                mks('20110508-060000'),
                mks('20110508-100000'),
                mks('20110508-150000'),
                mks('20110508-180000'),
            );
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
        }

        when (4) {
            # 4 - good test for combinations etc:
            my ($warnings, $errors, @specs) = parseSpecs('6d1');
            %S = (
                mks('20110508-010000'),
                mks('20110508-011000'),
                mks('20110508-012000'),
                mks('20110508-013000'),
                mks('20110508-090000'),
                mks('20110508-120000'),
                mks('20110508-150000'),
                mks('20110508-180000'),
                mks('20110508-203000'),
                mks('20110508-210000'),
            );
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
        }

        when (5) {
            # 5 - more than one day's worth
            my ($warnings, $errors, @specs) = parseSpecs('8d1,7d3,1d4');
            %S = (
                mks('20110506-010000'),
                mks('20110506-011000'),
                mks('20110506-012000'),
                mks('20110507-013000'),
                mks('20110507-090000'),
                mks('20110507-120000'),
                mks('20110508-150000'),
                mks('20110508-180000'),
                mks('20110508-203000'),
                mks('20110508-210000'),
            );
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
            # FIXED this doesn't give ideal result -- chooses B's that are too close together
            # FIXED: 1d1 -> middle one -- because of initial spacing
            #        2d1 -> first and one near the end -- 
            #           why? because of initial spacing, so that's OK
        }

        when (6) {
            # Test 6 -- example of bad choice with close snapshots:  
            my ($warnings, $errors, @specs) = parseSpecs('3w1');
            %S = (
                mks('20110426-050000'),
                mks('20110427-050000'),
                mks('20110428-050000'),
                mks('20110428-060000'),
            );
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
        }

        when (7) {
            # Test 5 - testing goodPeriods
            my ($warnings, $errors, @specs) = parseSpecs('6d1,2d4,3w1');  
                # note total of 5d -- not run at w/e
            %S = (
                mks('20110506-010000'),
                mks('20110506-020000'),
                mks('20110506-030000'),
                mks('20110506-040000'),
                mks('20110506-044000'),
                mks('20110506-050000'),
                mks('20110505-090000'),
                mks('20110505-140000'),
                mks('20110505-180000'),
                mks('20110504-090000'),
                mks('20110504-140000'),
                mks('20110504-180000'),
                mks('20110503-090000'),
                mks('20110503-140000'),
                mks('20110503-180000'),
                mks('20110501-090000'),
                mks('20110501-140000'),
                mks('20110501-180000'),
                mks('20110428-050000'),
                mks('20110427-050000'),
                mks('20110426-060000'),
                mks('20110426-040000'),
                #   mks('20100428-0500'),
            )   ;
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
        }

        when (8) {
            # Test 8 - wonky spec
            my ($warnings, $errors, @specs) = parseSpecs('2d7,3w1,1d1,2m1'); # 2d7,3w1,1d1,2m1
            %S = (
                mks('20110529-090000'), mks('20110529-120000'), mks('20110529-180000'),  # current
                mks('20110528-090000'), mks('20110528-120000'), mks('20110528-180000'),  # 2d7...
                mks('20110527-090000'), mks('20110527-120000'), mks('20110527-180000'),
                mks('20110526-090000'), mks('20110526-120000'), mks('20110526-180000'),
                mks('20110525-090000'), mks('20110525-120000'), mks('20110525-180000'),
                mks('20110524-090000'), mks('20110524-120000'), mks('20110524-180000'),
                mks('20110523-090000'), mks('20110523-120000'), mks('20110523-180000'),
                mks('20110522-090000'), mks('20110522-120000'), mks('20110522-180000'),  
                mks('20110521-090000'), mks('20110521-120000'), mks('20110521-180000'),  # 3w1...
                mks('20110518-090000'), mks('20110518-120000'), mks('20110518-180000'),
                mks('20110515-090000'), mks('20110515-120000'), mks('20110515-180000'),  # 1d1
                mks('20110512-090000'), mks('20110512-090100'), mks('20110512-090200'),  
                mks('20110512-090300'), mks('20110512-090400'), mks('20110512-090400'),  
                mks('20110512-090600'), mks('20110512-090700'), mks('20110512-090800'),  
                mks('20110512-090900'), mks('20110512-091000'), mks('20110512-091100'),  
                mks('20110403-090000'), mks('20110403-120000'), mks('20110403-180000'),  # 4m1
                mks('20110301-125900'),
            );
            my $now = stamp2time('20110529-230000');
            debug "\nTest run on $now " . time2stamp($now) . "\n";
            my @cSpecs;
            debug "\nsafely, calendar:\n";
            $Opt{calendar} = 1;
            $Opt{safe} = 1;
            @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
            debug "\nand now unsafely, calendar:\n";
            $Opt{calendar} = 1;
            $Opt{safe} = 0;
            @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
            debug "\nand now safely, non-calendar:\n";
            $Opt{calendar} = 0;
            $Opt{safe} = 1;
            @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
            debug "\nand now unsafely, non-calendar:\n";
            $Opt{calendar} = 0;
            $Opt{safe} = 0;
            @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
            #my @D = getDeleteList(@cSpecs);
        }

        when (9) {
            sub genTests {
                my (undef, undef, @specs) = parseSpecs('6d1,2d4,3w3,8m1'); 
                    # note total of 5d -- not run at w/e
                # need enough snapshots to fill all specs and then some
                for (my $date = stamp2time('20110401-070000'); 
                        $date < stamp2time('20110501-000000'); 
                        $date += HOUR*3) {
                    #for (my $date = stamp2time('20110401-070000'); 
                    #        $date < stamp2time('20110402-000000'); 
                    #        $date += HOUR*3) {
                    printlog "\n" . '-' x 80;
                    printlog "\nTest run on $date " . time2stamp($date) . "\n";
                    $S{$date} = {
                        name => time2stamp($date), 
                        path => "${$Opt{destination}}[0]",
                        fullname => "${$Opt{destination}}[0]/" . time2stamp($date),
                        partial => 0, 
                        remote => remote("${$Opt{destination}}[0]"),
                        daemon => remoteDaemon("${$Opt{destination}}[0]"),
                    };  # make snapshot
                    my @cSpecs = compileSpecs($date+HOUR/2, @specs);
                    displayCSpecs(@cSpecs);
                    my @D = getDeleteList(@cSpecs);
                    #@S = arrayDiff(%S, @D); # 'delete' them
                    foreach my $d (@D) {
                        delete $S{$d};
                    }
                }   
            }
            genTests;
        }

        when (10) {
            # 24 -> 4
            # better matching: don't favour ends if evenly spaced throughout the day
            #   -- somehow measure evenness, and then reduce endness
            $Opt{logfile} = './bstest10.log';
            my (undef, undef, @specs) = parseSpecs('1h24,4d6');
            %S = (
                mks('20110530-003000'), mks('20110530-013000'), mks('20110530-023000'),  
                mks('20110530-033000'), mks('20110530-043000'), mks('20110530-053000'),  
                mks('20110530-063000'), mks('20110530-073000'), mks('20110530-083000'),  
                mks('20110530-093000'), mks('20110530-103000'), mks('20110530-113000'),  
                mks('20110530-123000'), mks('20110530-133000'), mks('20110530-143000'),  
                mks('20110530-153000'), mks('20110530-163000'), mks('20110530-173000'),  
                mks('20110530-183000'), mks('20110530-193000'), mks('20110530-203000'),  
                mks('20110530-213000'), mks('20110530-223000'), mks('20110530-233000'),  

                mks('20110529-003000'), mks('20110529-013000'), mks('20110529-023000'),  
                mks('20110529-033000'), mks('20110529-043000'), mks('20110529-053000'),  
                mks('20110529-063000'), mks('20110529-073000'), mks('20110529-083000'),  
                mks('20110529-093000'), mks('20110529-103000'), mks('20110529-113000'),  
                mks('20110529-123000'), mks('20110529-133000'), mks('20110529-143000'),  
                mks('20110529-153000'), mks('20110529-163000'), mks('20110529-173000'),  
                mks('20110529-183000'), mks('20110529-193000'), mks('20110529-203000'),  
                mks('20110529-213000'), mks('20110529-223000'), mks('20110529-233000'),  

                mks('20110528-213000'), mks('20110528-223000'), mks('20110528-233000'),  
            )
            ;
            my $now = stamp2time('20110531-003000');
            my @cSpecs = compileSpecs $now, @specs;
            displayCSpecs(@cSpecs);
            my @D = getDeleteList(@cSpecs);
        }

        when (11) {
            # testing 'grouping'
            $Opt{logfile} = './bstest11.log';
            my (undef, undef, @specs) = parseSpecs('1h9,4d6');
            %S = (
                mks('20110530-093000'), mks('20110530-103000'), mks('20110530-113000'),  
                mks('20110530-123000'), mks('20110530-133000'), mks('20110530-143000'),  
                mks('20110530-153000'), mks('20110530-163000'), mks('20110530-173000'),  

                mks('20110529-093000'), mks('20110529-103000'), mks('20110529-113000'),  
                mks('20110529-123000'), mks('20110529-133000'), mks('20110529-143000'),  
                mks('20110529-153000'), mks('20110529-163000'), mks('20110529-173000'),  

                mks('20110528-213000'), mks('20110528-223000'), mks('20110528-233000'),  
            )
            ;
            my $now = stamp2time('20110531-003000');
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
            my @D = getDeleteList(@cSpecs);
        }

        when (12) {
            # testing expirables  
            $Opt{lockfile} = '/home/chris/Dropbox/perlwork/brandysnap/bs.lock';
            $Opt{source} = ['/home/chris/Dropbox/perlwork', '/library/pictures/Fujical.jpg'];
            $Opt{snapshotdir} = '/home/chris/tmp/bstest12/';
            $Opt{template} = 'test12';
            $Opt{spec} = '2d';
            $Opt{debug} = 3;
            $Opt{verbose} = 2;
            $Opt{loglevel} = 3;
            $Opt{logfile} = '/home/chris/Dropbox/perlwork/brandysnap/bstest12.log';
            $Opt{test} = 12;
            $Opt{exclude}='*.log*';
            #$Opt{delete-cp} = 0;
            #$Opt{dry-run} = 0;
            ##$Opt{delete} = 1;
            #
            %S = (
                mks('20110530-093000'), mks('20110530-103000'), mks('20110530-113000'),  
                mks('20110529-123000'), mks('20110529-133000'), mks('20110529-143000'),  
                mks('20110528-153000'), mks('20110528-163000'), mks('20110528-173000'),  

                mks('20110527-093000'), mks('20110527-103000'), mks('20110527-113000'),  
                mks('20110526-123000'), mks('20110526-133000'), mks('20110526-143000'),  
                mks('20110525-153000'), mks('20110525-163000'), mks('20110525-173000'),  

                mks('20110524-213000'), mks('20110524-223000'), mks('20110524-233000'),  
            )
            ;
            my $dest = ${$Opt{destination}}[0];
            # generate initial state
            foreach my $s (keys %S) {
                #    mkdir "$dest/" . snapshotName($s, 0);  # FIXME no more snapshotName
            }
            my $now = stamp2time('20110531-003000');
            my ($warnings, $errors, @specs) = parseSpecs('2d'); 
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
            my @D = getDeleteList(@cSpecs);
            #processDestination($dest, @specs);
        }

        when (13) {
            # low-level tests of date routines
            my ($beg, $end) = prevPeriod(stamp2time('20110622-234400'), 1);    # 1=day
            fullPeriod($beg, $end, 3);
            ($beg, $end) = prevPeriod(stamp2time('20110622-234400'), 3);    # 3=month
            fullPeriod($beg, $end, 3);
            ($beg, $end) = getPeriod(stamp2time('20110622-234400'), 2);    
            fullPeriod($beg, $end, 3);
            fullPeriod($beg, $end, 2);
        }

        when (14) {
            debug "Testing findGoodPeriods\n";
            $Opt{spec} = '1d7,1w3,1m11,1y';
            $Opt{verbose} = 3;
            $Opt{loglevel} = 3;
            $Opt{debug} = 5;
            $Opt{calendar} = 1;
            #
            %S = rsort(
                # just one will do
                mks('20110627-093000'),
            )
            ;
            my $dest = ${$Opt{destination}}[0];
            my $now = stamp2time('20110627-133000');
            my ($warnings, $errors, @specs) = parseSpecs($Opt{spec}); 
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
        }

        when (15) {
            debug "Testing findGoodPeriodsNoCal\n";
            # testing expirables  
            $Opt{spec} = '3d2,3w1,99m1';
            $Opt{verbose} = 2;
            $Opt{loglevel} = 3;
            $Opt{calendar} = 0;
            #
            %S = (
                # a good day, then space, then a good day
                mks('20110627-093000'), mks('20110627-103000'), mks('20110627-113000'),  
                mks('20110626-123000'), mks('20110625-133000'), mks('20110624-143000'),  
                mks('20110623-153000'), mks('20110623-163000'), mks('20110623-173000'),
                # then space, then a good week
                mks('20110604-143000'), mks('20110604-133000'), mks('20110604-123000'),
                # then space forever...
                mks('20110524-213000'), mks('20110424-223000'), mks('20110324-233000'),
            )
            ;
            my $dest = ${$Opt{destination}}[0];
            my $now = stamp2time('20110627-133000');
            my ($warnings, $errors, @specs) = parseSpecs($Opt{spec}); 
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
        }

        when (16) {
            print "Testing markOrDeleteSnapshot\n";
            $Opt{template} = 'test1';
            $Opt{destination} = '/home/chris/tmp';
            #markOrDeleteSnapshot("/home/chris/tmp", "test1-20110716-164234", '');
            #markOrDeleteSnapshot('chris@localhost:/home/chris/tmp', "test1-20110809-170104", '');
            %S = getSnapshotList("/home/chris/tmp");
            print "%S: ";
            foreach my $s (rsort keys %S) {
                print "$s: $S{$s}{partial} ";
            }
            print "\n";
            status('/home/chris/tmp');
        }

        when (17) {
            print "Testing min/max frequencies\n";
            $Opt{spec} = '1-2d3';
            $Opt{verbose} = 2;
            $Opt{loglevel} = 3;
            $Opt{calendar} = 1;
            my $now = stamp2time('20111027-224500');
            %S = (
                # days with 0,1,2,3 snapshots 
                mks('20111026-093000'), 
                mks('20111025-093000'), mks('20111025-103000'), 
                mks('20111024-093000'), mks('20111024-103000'), mks('20111024-113000'),  
            )
            ;
            my $dest = ${$Opt{destination}}[0];
            my ($warnings, $errors, @specs) = parseSpecs($Opt{spec}); 
            my @cSpecs = compileSpecs($now, @specs);
            displayCSpecs(@cSpecs);
        }

        when (18) {
            print "Testing prevPeriod with difficult dates\n";
            # 0=h 1=d 2=w 3=m 4=y
            my ($beg, $end);
            sub x {
                my $now = shift;
                my $periodn = shift;
                my ($beg, $end) = prevPeriod(stamp2time($now), $periodn);
                print "old: One $LevelName[$periodn] before $now was " . time2stampz($beg) . "\n";
                ($beg, $end) = prevPeriod2(stamp2time($now), $periodn);
                print "new: One $LevelName[$periodn] before $now was " . time2stampz($beg) . "\n";
            }
#            $Opt{calendar} = 0;
#            print "Non-calendar mode: \n";
            print "* jump into missing March hour\n";
            x('20120325-013000', 0);
            x('20120325-023000', 0);
            x('20120325-033000', 0);
            x('20120324-013000', 1);
            x('20120325-013000', 1);
            x('20120326-013000', 1);
            x('20120401-013000', 2);
            x('20120425-013000', 3);
            x('20120425-023000', 3);
            print "* jump from extra October hour\n";
            x('20121028-013000', 0);    # seems to get nowhere if tz ignored!
            x('20121028-023000', 0);
            x('20121028-033000', 0);
            print "* jump into missing 29 Feb\n";
            x('20110329-120000', 3);
#            $Opt{calendar} = 1;
#            print "Calendar mode: \n";
#            x('20120325-013000', 0);
#            x('20120325-023000', 0);
#            x('20120325-033000', 0);
#            x('20120324-013000', 1);
#            x('20120325-013000', 1);
#            x('20120326-013000', 1);
#            x('20120401-013000', 2);
        }

    }
}

#===================================================================================================

# Mainline is here

# Display basic info -- logging will happen later
my $intro = "$Script version $Version starting at " . (strftime "%H:%M:%S", localtime), 1;
printit "\n$intro\n", 1;
printit '-' x length($intro) . "\n\n", 1;
printit "Command line: $0 @ARGV\n", 3;

# No options supplied -- display help and exit
if (@ARGV == 0) {
    printit "ERROR: No options given\n"; 
    showHelp;
    exit EXITCONFIG;
}

# Get and validate options
if (processOptions() > 0) {
    printlog "ERROR: Problems found in configuration -- stopping\n", 1;
    printlog "Try '$Script --help' or 'man $Script' for help.\n", 1;
    logit '-' x 80, 1;
    exit EXITCONFIG;
}

# Help requested - display and exit
if ($Opt{help}) {
    showHelp;
    exit EXITOK;
}

# Version requested - display and exit
if ($Opt{version}) {
    showLicence;
    exit EXITOK;
}

# Turn off stacktrace if not required
if ($Opt{stacktrace}) {
    $SIG{__DIE__} = sub { Carp::confess( @_ ) };
} else {
    $SIG{__DIE__} = 'DEFAULT';  
}

# Create a lock to prevent overlapping runs
unless (open(LOCKFILE, '>', $Opt{lockfile}) and
        flock(LOCKFILE, LOCK_EX | LOCK_NB)      ) {
    printlog "Can not open and lock lock-file '$Opt{lockfile}'.\n" .
        "$Script is probably already running with that lock-file.\n" .
        "If you're sure it isn't, delete the lock-file and try again.\n", 1;
    exit EXITNOLOCK; 
}

displayOptions();

# Just run the test suite if required 
if ($Opt{test}) {
    testSuite();
    exit;
}

# Deal with each destination
foreach my $dest (@{$Opt{destination}}) {
    last if $Interrupted;
    debug "running destination $dest->{location}\n", 1;
    local %Opt = %Opt;
    foreach my $destOpt (keys %{$dest->{options}}) {
        debug "overriding $destOpt with '$dest->{options}->{$destOpt}'\n", 1;
        $Opt{$destOpt} = $dest->{options}->{$destOpt};
    }
    if ($Opt{status}) {
        getSnapshotList($dest->{location});
        status($dest->{location});
    } else {
        processDestination($dest->{location});
    }
}

displaySummary();

if ($Interrupted) { # FIXME is this useful?
    printlog "\n(Interrupted with signal '$Interrupted')\n", 1;
    $ExitCode = EXITINT if $ExitCode != EXITOK;
}
printlog "\n$Script stopping at " . (strftime "%H:%M:%S", localtime) . 
    " with exit code $ExitCode\n", 1,1;
logit '-' x 80, 1;

# Free the lock
close(LOCKFILE);    # closing the file automatically unlocks it
unlink $Opt{lockfile};

exit $ExitCode;
# That's the end

#===================================================================================================

# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab
